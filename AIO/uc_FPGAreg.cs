using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics.Eventing.Reader;

namespace AIO
{
    public partial class uc_FPGAreg : UserControl
    {
        public static Label[] lbldip = null;
        public static Label[] lblalctrl = null;
        public static GroupBox gboxdip = null;
        public static GroupBox gboxalctrl = null;
        public static GroupBox gboxFPGAstatus = null;
        public static bool svFPGAshowstatus = false;
        byte svFPGAregNo = 0;

        #region status
        public static Label[] lblsts6000 = new Label[16];
        public static Label[] lblsts6010 = new Label[16];
        public static Label[] lblsts6011 = new Label[16];
        public static Label[] lblsts6012 = new Label[16];
        public static Label[] lblsts6020 = new Label[16];
        public static Label[] lblsts6021 = new Label[16];
        public static Label[] lblsts6040 = new Label[16];
        public static Label[] lblsts6041 = new Label[16];
        public static Label[] lblsts6042 = new Label[16];
        public static Label[] lblsts6043 = new Label[16];
        public static Label[] lblsts6044 = new Label[16];
        public static Label[] lblsts6045 = new Label[16];
        public static Label[] lblsts6046 = new Label[16];
        public static Label[] lblsts6047 = new Label[16];
        public static Label[] lblsts6048 = new Label[16];
        public static Label[] lblsts6049 = new Label[16];
        public static Label[] lblsts604a = new Label[16];
        public static Label[] lblsts604b = new Label[16];
        public static Label[] lblsts6060 = new Label[16];
        public static Label[] lblsts6061 = new Label[16];
        public static Label[] lblsts6062 = new Label[16];

        public static Label lblststxt6000 = null;
        public static Label lblststxt6010 = null;
        public static Label lblststxt6011 = null;
        public static Label lblststxt6012 = null;
        public static Label lblststxt6020 = null;
        public static Label lblststxt6021 = null;
        public static Label lblststxt6040 = null;
        public static Label lblststxt6041 = null;
        public static Label lblststxt6042 = null;
        public static Label lblststxt6043 = null;
        public static Label lblststxt6044 = null;
        public static Label lblststxt6045 = null;
        public static Label lblststxt6046 = null;
        public static Label lblststxt6047 = null;
        public static Label lblststxt6048 = null;
        public static Label lblststxt6049 = null;
        public static Label lblststxt604a = null;
        public static Label lblststxt604b = null;
        public static Label lblststxt6060 = null;
        public static Label lblststxt6061 = null;
        public static Label lblststxt6062 = null;
        #endregion status

        #region FPGAreg[,] 吃scFPGAno
        //FPGAreg [0200:C12A/B,0300:H5512A,0400:C12B,0500:Primary,0600:TV130]   
        //FPGAreg.GetUpperBound(0)=213, FPGAreg.GetUpperBound(1)=3    

        /*

           deviceAll  deviceNo  deviceIDall  svFPGAregNo
               C12A     0          0200       0
             H5512A     1          0300       1
          Custom_UI     2          0400       2
               C12B     3          0200       0
            Primary     4          0500       4
              TV130     5          0600       5
       CarpStreamer     6          1000       6



              svFPGAregNo=0↓        svFPGAregNo=1↓      svFPGAregNo=2↓            svFPGAregNo=4↓          svFPGAregNo=5↓      svFPGAregNo=6↓        svFPGAregNo=7↓
        */
        public static string[,] FPGAreg =
        {
            { " 00 VER,",           " 00 VER,",          " 00 VER,",           "",  " 00 VER,",              " 00 VER,"          , " 00 VER,"           , " 00 VER,"        } ,
            { " 01 SI_SEL,0",       " 01 DIP_SW,00000000"," 01 SI_SEL,0",      "",  " 01 DIP_SW,00000000" ,  " 01 SI_SEL,0"      , " 01 DIP_SW,00000000", " 01 SI_SEL,0"    } ,
            { " 02 ID_NUM,1",       " 02 IP_NUM,0",      " 02 IT_XSR,0",       "",  " 02 IP_NUM,0" ,         " 02 ID_NUM,1"      , " 02 IP_NUM,0"       , " 02 ID_NUM,1"    } ,
            { " 03 IT_XSR,0",       " 03 DMR,0",         " 03 IT_YSR,0",       "",  " 03 DMR,0" ,            " 03 IT_XSR,0"      , " 03 DMR,0"          , " 03 IT_XSR,0"    } ,     
            { " 04 IT_YSR,0",       " 04 AL_CTRL,32",    " 04 AL_CTRL,32",     "",  " 04 AL_CTRL,19" ,       " 04 IT_YSR,0"      , " 04 AL_CTRL,19"     , " 04 IT_YSR,0"    } ,
            { " 05 IT_HSW,10",      " 05 OCP,0",         " 05 IT_HSW,10",      "",  " 05 OCP,0" ,            " 05 IT_HSW,5"      , " 05 OCP,0"          , " 05 IT_HSW,5"    } ,
            { " 06 IT_HBP,10",      " 06 CURR_1,0",      " 06 IT_HBP,10",      "",  " 06 CURR_1,0" ,         " 06 IT_HBP,5"      , " 06 XL_L,0"         , " 06 IT_HBP,5"    } ,
            { " 07 IT_HDP,480",     " 07 CURR_2,0",      " 07 IT_HDP,480",     "",  " 07 CURR_2,0" ,         " 07 IT_HDP,384"    , " 07 XL_R,0"         , " 07 IT_HDP,384"  } ,
            { " 08 IT_HFP,1100",    " 08 CURR_3,0",      " 08 IT_HFP,1100",    "",  " 08 CURR_3,0" ,         " 08 IT_HFP,1500"   , " 08 XR_L,0"         , " 08 IT_HFP,1500" } ,
            { " 09 IT_VSW,10",      " 09 CURR_4,0",      " 09 IT_VSW,10",      "",  " 09 CURR_4,0" ,         " 09 IT_VSW,5"      , " 09 XR_R,0"         , " 09 IT_VSW,5"    } ,
            { " 10 IT_VBP,10",      " 10",               " 10 IT_VBP,10",      "",  " 10" ,                  " 10 IT_VBP,30"     , " 10"                , " 10 IT_VBP,30"   } ,
            { " 11 IT_VDP,540",     " 11",               " 11 IT_VDP,540",     "",  " 11" ,                  " 11 IT_VDP,540"    , " 11"                , " 11 IT_VDP,540"  } ,
            { " 12 IT_VFP,240",     " 12",               " 12 IT_VFP,240",     "",  " 12" ,                  " 12 IT_VFP,100"    , " 12"                , " 12 IT_VFP,100"  } ,
            { " 13 IT_XBS,0",       " 13",               " 13 IT_XBS,0",       "",  " 13" ,                  " 13 IT_XBS,0"      , " 13"                , " 13 IT_XBS,0"    } ,
            { " 14 IT_XOF,0",       " 14",               " 14 IT_XOF,0",       "",  " 14" ,                  " 14 IT_XOF,0"      , " 14"                , " 14 IT_XOF,0"    } ,
            { " 15 IT_XST,257",     " 15",               " 15 IT_XST,257",     "",  " 15" ,                  " 15 IT_XST,257"    , " 15"                , " 15 IT_XST,257"  } ,
            { " 16 IT_YBS,0",       " 16 DUTY,36",       " 16 IT_YBS,0",       "",  " 16 DUTY,12" ,          " 16 IT_YBS,0"      , " 16 DUTY,36"        , " 16 IT_YBS,0"    } ,
            { " 17 IT_YOF,0",       " 17 T2F,30",        " 17 IT_YOF,0",       "",  " 17 T2F,583" ,          " 17 IT_YOF,0"      , " 17 T2F,30"         , " 17 IT_YOF,0"    } ,
            { " 18 IT_YST,1",       " 18 T2P,228",       " 18 IT_YST,1",       "",  " 18 T2P,600" ,          " 18 IT_YST,1"      , " 18 T2P,228"        , " 18 IT_YST,1"    } ,
            { " 19 IT_XDT,480",     " 19 T2B,318",       " 19 IT_XDT,480",     "",  " 19 T2B,1541" ,         " 19 IT_XDT,480"    , " 19 T2B,318"        , " 19 IT_XDT,384"  } ,
            { " 20 IT_YDT,540",     " 20 T3F,30",        " 20 IT_YDT,540",     "",  " 20 T3F,104" ,          " 20 IT_YDT,540"    , " 20 T3F,30"         , " 20 IT_YDT,540"  } ,
            { " 21 PT_SEL,4",       " 21 T3P,228",       " 21 PT_SEL,4",       "",  " 21 T3P,1150" ,         " 21 PT_SEL,4"      , " 21 T3P,228"        , " 21 PT_SEL,4"    } ,
            { " 22 Cu_XCU,50",      " 22 T3B,318",       " 22 Cu_XCU,50",      "",  " 22 T3B,1470" ,         " 22 Flash_sw,3"    , " 22 T3B,318"        , " 22 Flash_sw,3"  } ,
            { " 23 Cu_YCU,50",      " 23 ",              " 23 Cu_YCU,50",      "",  " 23 " ,                 " 23 Path_sel,7"    , " 23 "               , " 23 Path_sel,7"  } ,
            { " 24 CU_SEL,32767",   " 24",               " 24 CU_SEL,32767",   "",  " 24" ,                  " 24"               , " 24"                , " 24"             } ,
            { " 25 XB_HPD,0",       " 25",               " 25 XB_HPD,0",       "",  " 25" ,                  " 25 XB_HPD,0"      , " 25"                , " 25 XB_HPD,0"    } ,
            { " 26 FAN_FQ,3000",    " 26",               " 26 FAN_FQ,3000",    "",  " 26" ,                  " 26"               , " 26"                , " 26"             } ,
            { " 27 FN1_DT,750",     " 27",               " 27 FN1_DT,750",     "",  " 27" ,                  " 27"               , " 27"                , " 27"             } ,
            { " 28 FN2_DT,750",     " 28",               " 28 FN2_DT,750",     "",  " 28" ,                  " 28"               , " 28"                , " 28"             } ,
            { " 29 FN3_DT,750",     " 29",               " 29 FN3_DT,750",     "",  " 29" ,                  " 29"               , " 29"                , " 29"             } ,
            { " 30 FN4_DT,750" ,    " 30",               " 30 FN4_DT,750",     "",  " 30" ,                  " 30"               , " 30"                , " 30"             } ,
            { " 31 BK_SEL,0",       " 31",               " 31 BK_SEL,0",       "",  " 31 BKSEL,0" ,          " 31 BKSEL,0"       , " 31"                , " 31 BK_SEL,0"    } ,
            { " 32",                " 32 OM_RW,0",       " 32",                "",  " 32 OM_RW,0" ,          " 32"               , " 32 OM_RW,0"        , " 32"             } ,
            { " 33",                " 33 OM_ADR,0",      " 33",                "",  " 33 OM_ADR,0" ,         " 33"               , " 33 OM_ADR,0"       , " 33"             } ,
            { " 34",                " 34 OM_WrDt,0",     " 34",                "",  " 34 OM_Wdt,0" ,         " 34"               , " 34 OM_Wdt,0"       , " 34"             } ,
            { " 35",                " 35 OM_RdDt,",      " 35",                "",  " 35 OM_Rdt," ,          " 35"               , " 35 OM_Rdt,"        , " 35"             } ,
            { " 36",                " 36",               " 36",                "",  " 36" ,                  " 36"               , " 36"                , " 36"             } ,
            { " 37",                " 37",               " 37",                "",  " 37" ,                  " 37"               , " 37"                , " 37"             } ,
            { " 38",                " 38",               " 38",                "",  " 38" ,                  " 38"               , " 38"                , " 38"             } ,
            { " 39",                " 39",               " 39",                "",  " 39" ,                  " 39"               , " 39"                , " 39"             } ,
            { " 40",                " 40",               " 40",                "",  " 40" ,                  " 40"               , " 40"                , " 40"             } ,
            { " 41",                " 41",               " 41",                "",  " 41" ,                  " 41"               , " 41"                , " 41"             } ,
            { " 42",                " 42",               " 42",                "",  " 42" ,                  " 42"               , " 42"                , " 42"             } ,
            { " 43",                " 43",               " 43",                "",  " 43" ,                  " 43"               , " 43"                , " 43"             } ,
            { " 44",                " 44",               " 44",                "",  " 44" ,                  " 44"               , " 44"                , " 44"             } ,
            { " 45",                " 45",               " 45",                "",  " 45" ,                  " 45"               , " 45"                , " 45"             } ,
            { " 46",                " 46",               " 46",                "",  " 46" ,                  " 46"               , " 46"                , " 46"             } ,
            { " 47",                " 47",               " 47",                "",  " 47" ,                  " 47"               , " 47"                , " 47"             } ,
            { " 48",                " 48 GRAY_R,0" ,     " 48",                "",  " 48 PG_R,0" ,           " 48"               , " 48 PG_R,0"         , " 48"             } ,
            { " 49",                " 49 GRAY_G,512",    " 49",                "",  " 49 PG_G,0" ,           " 49"               , " 49 PG_G,512"       , " 49"             } ,
            { " 50 OT_XSR,60",      " 50 GRAY_B,0",      " 50 OT_XSR,60",      "",  " 50 PG_B,0" ,           " 50 OT_XSR,0"      , " 50 PG_B,0"         , " 50 OT_XSR,0"    } ,
            { " 51 OT_YSR,0",       " 51 BANK,0",        " 51 OT_YSR,0",       "",  " 51 PT_BANK,0" ,        " 51 OT_YSR,0"      , " 51 PT_BANK,0"      , " 51 OT_YSR,0"    } ,
            { " 52 OT_HSW,2",       " 52 AutRUN,360",    " 52 OT_HSW,2",       "",  " 52 PG_Auto,360" ,      " 52 OT_HSW,2"      , " 52 PG_Auto,360"    , " 52 OT_HSW,2"    } ,
            { " 53 OT_HBP,18",      " 53",               " 53 OT_HBP,18",      "",  " 53 PG_R1,512" ,        " 53 OT_HBP,18"     , " 53"                , " 53 OT_HBP,18"   } ,
            { " 54 OT_HDP,960",     " 54",               " 54 OT_HDP,960",     "",  " 54 PG_G1,512" ,        " 54 OT_HDP,60"     , " 54"                , " 54 OT_HDP,60"   } ,
            { " 55 OT_HFP,20",      " 55",               " 55 OT_HFP,20",      "",  " 55 PG_B1,512" ,        " 55 OT_HFP,137"    , " 55"                , " 55 OT_HFP,137"  } ,
            { " 56 OT_VSW,2",       " 56",               " 56 OT_VSW,2",       "",  " 56 PG_FX,161" ,        " 56 OT_VSW,2"      , " 56"                , " 56 OT_VSW,2"    } ,
            { " 57 OT_VBP,27",      " 57",               " 57 OT_VBP,27",      "",  " 57 PG_FY,181" ,        " 57 OT_VBP,2"      , " 57"                , " 57 OT_VBP,2"    } ,
            { " 58 OT_VDP,135",     " 58",               " 58 OT_VDP,135",     "",  " 58 PG_FW,160" ,        " 58 OT_VDP,360"    , " 58"                , " 58 OT_VDP,360"  } ,
            { " 59 OT_VFP,28",      " 59",               " 59 OT_VFP,28",      "",  " 59 PG_FH,180" ,        " 59 OT_VFP,20"     , " 59"                , " 59 OT_VFP,20"   } ,
            { " 60 BX_GAP,1",       " 60",               " 60 BX_GAP,1",       "",  " 60" ,                  " 60 BX_GAP,1"      , " 60"                , " 60 BX_GAP,1"    } ,
            { " 61 AG_MOD,0",       " 61",               " 61 AG_MOD,0",       "",  " 61" ,                  " 61 AG_MOD,0"      , " 61"                , " 61 AG_MOD,0"    } ,
            { " 62 BX_SEL,0",       " 62",               " 62",                "",  " 62" ,                  " 62"               , " 62"                , " 62"             } ,
            { " 63 XB_GAP,136",     " 63",               " 63",                "",  " 63" ,                  " 63 XB_GAP,360"    , " 63"                , " 63 XB_GAP,360"  } ,
            { " 64",                " 64",               " 64",                "",  " 64 CONTROL,0" ,        " 64"               , " 64 CONTROL,0"      , " 64"             } ,
            { " 65",                " 65",               " 65",                "",  " 65 DELAY,0" ,          " 65"               , " 65 DELAY,0"        , " 65"                     } ,
            { " 66",                " 66 START_X,0",     " 66",                "",  " 66 START_X,0" ,        " 66"               , " 66 START_X,0"      , " 66"                     } ,
            { " 67",                " 67 START_Y,0",     " 67",                "",  " 67 START_Y,0" ,        " 67"               , " 67 START_Y,0"      , " 67"                     } ,
            { " 68",                " 68",               " 68",                "",  " 68" ,                  " 68"               , " 68 RGB En,15"      , " 68"                     } ,
            { " 69",                " 69",               " 69",                "",  " 69" ,                  " 69"               , " 69"                , " 69"             } ,
            { " 70 GOP_Ts,1000",    " 70",               " 70 GOP_Ts,1000",    "",  " 70" ,                  " 70 DutySel,1"     , " 70"                , " 70 DutySel,1"             } ,
            { " 71 GOP_T1,1000",    " 71",               " 71 GOP_T1,1000",    "",  " 71" ,                  " 71 GOP_Ts,434"    , " 71"                , " 71 GOP_Ts,434"             } ,
            { " 72 Gop_T1F,6000",   " 72",               " 72 Gop_T1F,6000",   "",  " 72" ,                  " 72 Gop_T2f,30"    , " 72"                , " 72 Gop_T2f,30"             } ,
            { " 73 Gop_T2F,414",    " 73",               " 73 Gop_T2F,414",    "",  " 73" ,                  " 73 Gop_T2p,372"   , " 73"                , " 73 Gop_T2p,372"             } ,
            { " 74 Gop_T2P,350",    " 74",               " 74 Gop_T2P,350",    "",  " 74" ,                  " 74 Gop_T2b,466"   , " 74"                , " 74 Gop_T2b,466"             } ,
            { " 75 Gop_T2B,1236",   " 75",               " 75 Gop_T2B,1236",   "",  " 75" ,                  " 75 Gop_T3f1,50"   , " 75"                , " 75 Gop_T3f1,50"             } ,
            { " 76 Gop_T3F,124",    " 76",               " 76 Gop_T3F,124",    "",  " 76" ,                  " 76 Gop_T3p,146"   , " 76"                , " 76 Gop_T3p,146"             } ,
            { " 77 Gop_T3P,752",    " 77",               " 77 Gop_T3P,752",    "",  " 77" ,                  " 77 Gop_T3b1,238"  , " 77"                , " 77 Gop_T3b1,238"             } ,
            { " 78 Gop_T3B,1124",   " 78",               " 78 Gop_T3B,1124",   "",  " 78" ,                  " 78 Gop_T3f2,238"  , " 78"                , " 78 Gop_T3f2,238"             } ,
            { " 79 Gop_TX2,1000",   " 79",               " 79 Gop_TX2,1000",   "",  " 79" ,                  " 79 Gop_T3b2,50"   , " 79"                , " 79 Gop_T3b2,50"             } ,
            { " 80 Gop_TX1_1,8000", " 80",               " 80 Gop_TX1_1,8000", "",  " 80 OSD_Ctrl,0" ,       " 80 Gop_T4p,434"   , " 80 OSD_Ctrl,0"     , " 80 Gop_T4p,434"  } ,
            { " 81 Gop_TX3_1,7000", " 81",               " 81 Gop_TX3_1,7000", "",  " 81 OSD_FntD,0" ,       " 81 Gop_T4f,4774"  , " 81 OSD_FntD,0"     , " 81 Gop_T4f,4774"  } ,
            { " 82 Gop_TX1_2,8000", " 82 R_FrGray,1023", " 82 Gop_TX1_2,8000", "",  " 82 OSD_FntR,0" ,       " 82"               , " 82 OSD_Fnt1,0"     , " 82"  } ,
            { " 83 Gop_TX3_2,7000", " 83 G_FrGray,1023", " 83 Gop_TX3_2,7000", "",  " 83 OSD_FntG,512" ,     " 83"               , " 83 OSD_Fnt2,512"   , " 83"   } ,
            { " 84",                " 84 B_FrGray,1023", " 84",                "",  " 84 OSD_FntB,0" ,       " 84"               , " 84 OSD_Fnt3,0"     , " 84"     } ,
            { " 85",                " 85 R_BkGray,1023", " 85",                "",  " 85 OSD_BkR,0" ,        " 85"               , " 85 OSD_Bk1,0"      , " 85"      } ,
            { " 86",                " 86 R_BkGray,1023", " 86",                "",  " 86 OSD_BkG,0" ,        " 86"               , " 86 OSD_Bk2,0"      , " 86"      } ,
            { " 87",                " 87 R_BkGray,1023", " 87",                "",  " 87 OSD_BkB,0" ,        " 87"               , " 87 OSD_Bk3,0"      , " 87"      } ,
            { " 88",                " 88",               " 88",                "",  " 88" ,                  " 88"               , " 88"                , " 88"     } ,
            { " 89",                " 89",               " 89",                "",  " 89" ,                  " 89"               , " 89"                , " 89"     } ,
            { " 90",                " 90",               " 90",                "",  " 90" ,                  " 90"               , " 90"                , " 90"     } ,
            { " 91",                " 91",               " 91",                "",  " 91" ,                  " 91"               , " 91"                , " 91"     } ,
            { " 92",                " 92",               " 92",                "",  " 92" ,                  " 92"               , " 92"                , " 92"     } ,
            { " 93",                " 93",               " 93",                "",  " 93" ,                  " 93"               , " 93"                , " 93"     } ,
            { " 94",                " 94",               " 94",                "",  " 94" ,                  " 94"               , " 94"                , " 94"        } ,
            { " 95",                " 95",               " 95",                "",  " 95" ,                  " 95"               , " 95"                , " 95"     } ,
            { " 96",                " 96",               " 96",                "",  " 96 State,0" ,          " 96"               , " 96 State,0"        , " 96"    } ,
            { " 97",                " 97",               " 97",                "",  " 97" ,                  " 97"               , " 97 Demura ID,0"    , " 97"    } ,
            { " 98",                " 98",               " 98",                "",  " 98" ,                  " 98"               , " 98"                , " 98"     } ,
            { " 99",                " 99",               " 99",                "",  " 99" ,                  " 99"               , " 99"                , " 99"     } ,
            { "100 OM_SEL,0",       "100",               "100 OM_SEL,0",       "",  "100" ,                  "100 OM_SEL,0"      , "100"                , "100 OM_SEL,0"     } ,
            { "101 OM_RW,1",        "101",               "101 OM_RW,1",        "",  "101" ,                  "101 OM_RW,1"       , "101"                , "101 OM_RW,1"    } ,
            { "102 OM_ADR,0",       "102",               "102 OM_ADR,0",       "",  "102" ,                  "102 OM_ADR,0"      , "102"                , "102 OM_ADR,0"    } ,
            { "103 OM_Wr,0",        "103",               "103 OM_Wr,0",        "",  "103" ,                  "103 OM_Wdta,0"     , "103"                , "103 OM_Wr,0"     } ,
            { "104 OM_Rd,",         "104",               "104 OM_Rd,",         "",  "104" ,                  "104 OM_Rdta,"      , "104"                , "104 OM_Rd,"     } ,
            { "105 GRAY_R,1023",    "105",               "105 GRAY_R,1023",    "",  "105" ,                  "105 GRAY_R,1023"   , "105"                , "105 GRAY_R,1023"    } ,
            { "106 GRAY_G,1023",    "106",               "106 GRAY_G,1023",    "",  "106" ,                  "106 GRAY_G,1023"   , "106"                , "106 GRAY_G,1023"     } ,
            { "107 GRAY_B,1023",    "107",               "107 GRAY_B,1023",    "",  "107" ,                  "107 GRAY_B,1023"   , "107"                , "107 GRAY_B,1023"     } ,
            { "108 X_START,0",      "108",               "108 X_START,0",      "",  "108" ,                  "108 X_Start,0"     , "108"                , "108 X_START,0"    } ,
            { "109 X_END,119",      "109",               "109 X_END,119",      "",  "109" ,                  "109 X_End,191"     , "109"                , "109 X_END,191"    } ,
            { "110 Y_START,0",      "110",               "110 Y_START,0",      "",  "110" ,                  "110 Y_Start,0"     , "110"                , "110 Y_START,0"    } ,
            { "111 Y_END,134",      "111",               "111 Y_END,134",      "",  "111" ,                  "111 Y_End,179"     , "111"                , "111 Y_END,179"    } ,
            { "112 DATA_out,1",     "112",               "112 DATA_out,1",     "",  "112 OSD_Ctrl,0" ,       "112 DATA_out,1"    , "112"                , "112 DATA_out,1"    } ,
            { "113 Char_Sel,0",     "113",               "113 Char_Sel,0",     "",  "113 OSD_FntD,0" ,       "113 Char_Sel,0"    , "113"                , "113 Char_Sel,0"    } ,
            { "114 Char_WDt,0",     "114",               "114 Char_WDt,0",     "",  "114 OSD_FntR,0" ,       "114 Char_Wdta,0"   , "114"                , "114 Char_WDt,0"    } ,
            { "115 Char_Xpos,0",    "115",               "115",                "",  "115 OSD_FntG,512" ,     "115 Char_Xp,10"    , "115"                , "115 Char_Xpos,10"     } ,
            { "116 Char_Ypos,0",    "116",               "116",                "",  "116 OSD_FntB,0" ,       "116 Char_Yp,10"    , "116"                , "116 Char_Ypos,10"    } ,
            { "117 bgrl_R,0",       "117",               "117",                "",  "117 OSD_BkR,0" ,        "117 bgrl_R,0"      , "117"                , "117 bgrl_R,0"    } ,
            { "118 bgrl_G,0",       "118",               "118",                "",  "118 OSD_BkG,0" ,        "118 bgrl_G,0"      , "118"                , "118 bgrl_G,0"    } ,
            { "119 bgrl_B,0",       "119",               "119",                "",  "119 OSD_BkB,0" ,        "119 bgrl_B,0"      , "119"                , "119 bgrl_B,0"    } ,
            { "120 FR_LCK,0",       "120",               "120",                "",  "120" ,                  "120 FR_LCK,0"      , "120"                , "120 FR_LCK,0"    } ,
            { "121",                "121",               "121",                "",  "121" ,                  "121"               , "121"                , "121"    } ,
            { "122",                "122",               "122",                "",  "122" ,                  "122"               , "122"                , "122"    } ,
            { "123",                "123",               "123",                "",  "123" ,                  "123"               , "123"                , "123"    } ,
            { "124",                "124",               "124",                "",  "124" ,                  "124"               , "124"                , "124"    } ,
            { "125",                "125",               "125",                "",  "125" ,                  "125"               , "125"                , "125"    } ,
            { "126",                "126",               "126",                "",  "126" ,                  "126"               , "126"                , "126"    } ,
            { "127",                "127",               "127",                "",  "127" ,                  "127"               , "127"                , "127"    } ,
            { "128",                "128",               "128",                "",  "128 HDMI_cnt,0" ,       "128"               , "128"                , "128"    } ,
            { "129",                "129",               "129",                "",  "129" ,                  "129"               , "129"                , "129"    } ,
            { "130",                "130",               "130",                "",  "130" ,                  "130"               , "130"                , "130"     } ,
            { "131",                "131",               "131",                "",  "131" ,                  "131"               , "131"                , "131"     } ,
            { "132",                "132",               "132",                "",  "132" ,                  "132"               , "132"                , "132"    } ,
            { "133",                "133",               "133",                "",  "133" ,                  "133"               , "133"                , "133"    } ,
            { "134",                "134",               "134",                "",  "134" ,                  "134"               , "134"                , "134"    } ,
            { "135",                "135",               "135",                "",  "135" ,                  "135"               , "135"                , "135"    } ,
            { "136",                "136",               "136",                "",  "136" ,                  "136"               , "136"                , "136"     } ,
            { "137",                "137",               "137",                "",  "137" ,                  "137"               , "137"                , "137"     } ,
            { "138",                "138",               "138",                "",  "138" ,                  "138"               , "138"                , "138"    } ,
            { "139",                "139",               "139",                "",  "139" ,                  "139"               , "139"                , "139"    } ,
            { "140",                "140",               "140",                "",  "140" ,                  "140"               , "140"                , "140"    } ,
            { "141",                "141",               "141",                "",  "141" ,                  "141"               , "141"                , "141"    } ,
            { "142",                "142",               "142",                "",  "142" ,                  "142"               , "142"                , "142"     } ,
            { "143",                "143",               "143",                "",  "143" ,                  "143"               , "143"                , "143"     } ,
            { "144",                "144",               "144",                "",  "144" ,                  "144"               , "144"                , "144"     } ,
            { "145",                "145",               "145",                "",  "145" ,                  "145"               , "145"                , "145"     } ,
            { "146",                "146",               "146",                "",  "146" ,                  "146"               , "146"                , "146"     } ,
            { "147",                "147",               "147",                "",  "147" ,                  "147"               , "147"                , "147"     } ,
            { "148",                "148",               "148",                "",  "148" ,                  "148"               , "148"                , "148"     } ,
            { "149",                "149",               "149",                "",  "149" ,                  "149"               , "149"                , "149"     } ,
            { "150",                "150",               "150",                "",  "150" ,                  "150"               , "150"                , "150"     } ,
            { "151",                "151",               "151",                "",  "151" ,                  "151"               , "151"                , "151"     } ,
            { "152",                "152",               "152",                "",  "152" ,                  "152"               , "152"                , "152"     } ,
            { "153",                "153",               "153",                "",  "153" ,                  "153"               , "153"                , "153"     } ,
            { "154",                "154",               "154",                "",  "154" ,                  "154"               , "154"                , "154"     } ,
            { "155",                "155",               "155",                "",  "155" ,                  "155"               , "155"                , "155"     } ,
            { "156",                "156",               "156",                "",  "156" ,                  "156"               , "156"                , "156"     } ,
            { "157",                "157",               "157",                "",  "157" ,                  "157"               , "157"                , "157"     } ,
            { "158",                "158",               "158",                "",  "158" ,                  "158"               , "158"                , "158"     } ,
            { "159",                "159",               "159",                "",  "159" ,                  "159"               , "159"                , "159"     } ,
            { "160",                "160",               "160",                "",  "160" ,                  "160"               , "160"                , "160"     } ,
            { "161",                "161",               "161",                "",  "161" ,                  "161"               , "161"                , "161"     } ,
            { "162",                "162",               "162",                "",  "162" ,                  "162"               , "162"                , "162"     } ,
            { "163",                "163",               "163",                "",  "163" ,                  "163"               , "163"                , "163"     } ,
            { "164",                "164",               "164",                "",  "164" ,                  "164"               , "164"                , "164"     } ,
            { "165",                "165",               "165",                "",  "165" ,                  "165"               , "165"                , "165"     } ,
            { "166",                "166",               "166",                "",  "166" ,                  "166"               , "166"                , "166"     } ,
            { "167",                "167",               "167",                "",  "167" ,                  "167"               , "167"                , "167"     } ,
            { "168",                "168",               "168",                "",  "168" ,                  "168"               , "168"                , "168"     } ,
            { "169",                "169",               "169",                "",  "169" ,                  "169"               , "169"                , "169"     } ,
            { "170",                "170",               "170",                "",  "170" ,                  "170"               , "170"                , "170"     } ,
            { "171",                "171",               "171",                "",  "171" ,                  "171"               , "171"                , "171"     } ,
            { "172",                "172",               "172",                "",  "172" ,                  "172"               , "172"                , "172"     } ,
            { "173",                "173",               "173",                "",  "173" ,                  "173"               , "173"                , "173"     } ,
            { "174",                "174",               "174",                "",  "174" ,                  "174"               , "174"                , "174"     } ,
            { "175",                "175",               "175",                "",  "175" ,                  "175"               , "175"                , "175"     } ,
            { "176",                "176",               "176",                "",  "176" ,                  "176"               , "176"                , "176"     } ,
            { "177",                "177",               "177",                "",  "177" ,                  "177"               , "177"                , "177"     } ,
            { "178",                "178",               "178",                "",  "178" ,                  "178"               , "178"                , "178"     } ,
            { "179",                "179",               "179",                "",  "179" ,                  "179"               , "179"                , "179"     } ,
            { "180",                "180",               "180",                "",  "180" ,                  "180"               , "180"                , "180"     } ,
            { "181",                "181",               "181",                "",  "181" ,                  "181"               , "181"                , "181"     } ,
            { "182",                "182",               "182",                "",  "182" ,                  "182"               , "182"                , "182"     } ,
            { "183",                "183",               "183",                "",  "183" ,                  "183"               , "183"                , "183"     } ,
            { "184",                "184",               "184",                "",  "184" ,                  "184"               , "184"                , "184"     } ,
            { "185",                "185",               "185",                "",  "185" ,                  "185"               , "185"                , "185"     } ,
            { "186",                "186",               "186",                "",  "186" ,                  "186"               , "186"                , "186"     } ,
            { "187",                "187",               "187",                "",  "187" ,                  "187"               , "187"                , "187"     } ,
            { "188",                "188",               "188",                "",  "188" ,                  "188"               , "188"                , "188"     } ,
            { "189",                "189",               "189",                "",  "189" ,                  "189"               , "189"                , "189"     } ,
            { "190",                "190",               "190",                "",  "190" ,                  "190"               , "190"                , "190"     } ,
            { "191",                "191",               "191",                "",  "191" ,                  "191"               , "191"                , "191"     } ,
            { "192",                "192",               "192",                "",  "192" ,                  "192"               , "192"                , "192"     } ,
            { "193",                "193",               "193",                "",  "193" ,                  "193"               , "193"                , "193"     } ,
            { "194",                "194",               "194",                "",  "194" ,                  "194"               , "194"                , "194"     } ,
            { "195",                "195",               "195",                "",  "195" ,                  "195"               , "195"                , "195"     } ,
            { "196",                "196",               "196",                "",  "196" ,                  "196"               , "196"                , "196"     } ,
            { "197",                "197",               "197",                "",  "197" ,                  "197"               , "197"                , "197"     } ,
            { "198",                "198",               "198",                "",  "198" ,                  "198"               , "198"                , "198"     } ,
            { "199",                "199",               "199",                "",  "199" ,                  "199"               , "199"                , "199"     } ,
            { "200 C0_msg_0,",      "200",               "200 C0_msg_0,",      "",  "200" ,                  "200 Flash_ste,"    , "200"                , "200 Flash_ste,"     } ,
            { "201 C0_msg_1,",      "201",               "201 C0_msg_1,",      "",  "201" ,                  "201 CB_Rste,"      , "201"                , "201 CB_Rste,"     } ,
            { "202 C1_msg_0,",      "202",               "202 C1_msg_0,",      "",  "202" ,                  "202 Ux_Rdcnt,"     , "202"                , "202 Ux_Rdcnt,"     } ,
            { "203 C1_msg_1,",      "203",               "203 C1_msg_1,",      "",  "203" ,                  "203 Ux_chkNG,"     , "203"                , "203 Ux_chkNG,"     } ,
            { "204 C1_msg_2,",      "204",               "204 C1_msg_2,",      "",  "204" ,                  "204 SYS_sts0,"     , "204"                , "204 SYS_sts0,"     } ,
            { "205 CB_Rdsts,",      "205",               "205 CB_Rdsts,",      "",  "205" ,                  "205 SYS_sts1,"     , "205"                , "205 SYS_sts1,"     } ,
            { "206 U0_RdCnt,",      "206",               "206 U0_RdCnt,",      "",  "206" ,                  "206 LS_i2cNG,"     , "206"                , "206 LS_i2cNG,"     } ,
            { "207 U1_RdCnt,",      "207",               "207 U1_RdCnt,",      "",  "207" ,                  "207"               , "207"                , "207"     } ,
            { "208 U2_RdCnt,",      "208",               "208 U2_RdCnt,",      "",  "208" ,                  "208"               , "208"                , "208"     } ,
            { "209 U3_RdCnt,",      "209",               "209 U3_RdCnt,",      "",  "209" ,                  "209"               , "209"                , "209"     } ,
            { "210 Uckm_NG,",       "210",               "210 Uckm_NG,",       "",  "210" ,                  "210"               , "210"                , "210"     } ,
            { "211 SYS_Stu1,",      "211",               "211 SYS_Stu1,",      "",  "211" ,                  "211"               , "211"                , "211"     } ,
            { "212 SYS_Stu2,",      "212",               "212 SYS_Stu2,",      "",  "212" ,                  "212"               , "212"                , "212"     } ,
            { "213 LS_i2c_ng,",     "213",               "213",                "",  "213" ,                  "213"               , "213"                , "213"     } ,
            { "214,",               "214",               "214",                "",  "214" ,                  "214"               , "214"                , "214"     } ,
            { "215,",               "215",               "215",                "",  "215" ,                  "215"               , "215"                , "215"     } ,
            { "216,",               "216",               "216",                "",  "216" ,                  "216"               , "216"                , "216"     } ,
            { "217g,",              "217",               "217",                "",  "217" ,                  "217"               , "217"                , "217"     } ,
            { "218,",               "218",               "218",                "",  "218" ,                  "218"               , "218"                , "218"     } ,
            { "219,",               "219",               "219",                "",  "219" ,                  "219"               , "219"                , "219"     } ,
            { "220,",               "220",               "220",                "",  "220" ,                  "220"               , "220"                , "220"     } ,
            { "221,",               "221",               "221",                "",  "221" ,                  "221"               , "221"                , "221"     } ,
            { "222,",               "222",               "222",                "",  "222" ,                  "222"               , "222"                , "222"     } ,
            { "223,",               "223",               "223",                "",  "223" ,                  "223"               , "223"                , "223"     } ,
            { "224,",               "224",               "224",                "",  "224" ,                  "224"               , "224"                , "224"     } ,
            { "225,",               "225",               "225",                "",  "225" ,                  "225"               , "225"                , "225"     } ,
            { "226,",               "226",               "226",                "",  "226" ,                  "226"               , "226"                , "226"     } ,
            { "227,",               "227",               "227",                "",  "227" ,                  "227"               , "227"                , "227"     } ,
            { "228,",               "228",               "228",                "",  "228" ,                  "228"               , "228"                , "228"     } ,
            { "229,",               "229",               "229",                "",  "229" ,                  "229"               , "229"                , "229"     } ,
            { "230,",               "230",               "230",                "",  "230" ,                  "229"               , "230"                , "230"     } ,
            { "231,",               "231",               "231",                "",  "231" ,                  "231"               , "231"                , "231"     } ,
            { "232,",               "232",               "232",                "",  "232" ,                  "232"               , "232"                , "232"     } ,
            { "233,",               "233",               "233",                "",  "233" ,                  "233"               , "233"                , "233"     } ,
            { "234,",               "234",               "234",                "",  "234" ,                  "234"               , "234"                , "234"     } ,
            { "235,",               "235",               "235",                "",  "235" ,                  "235"               , "235"                , "235"     } ,
            { "236,",               "236",               "236",                "",  "236" ,                  "236"               , "236"                , "236"     } ,
            { "237,",               "237",               "237",                "",  "237" ,                  "237"               , "237"                , "237"     } ,
            { "238,",               "238",               "238",                "",  "238" ,                  "238"               , "238"                , "238"     } ,
            { "239,",               "239",               "239",                "",  "239" ,                  "239"               , "239"                , "239"     } ,
            { "240,",               "240",               "240",                "",  "240" ,                  "240"               , "240"                , "240"     } ,
            { "241,",               "241",               "241",                "",  "241" ,                  "241"               , "241"                , "241"     } ,
            { "242,",               "242",               "242",                "",  "242" ,                  "242"               , "242"                , "242"     } ,
            { "243,",               "243",               "243",                "",  "243" ,                  "243"               , "243"                , "243"     } ,
            { "244,",               "244",               "244",                "",  "244" ,                  "244"               , "244"                , "244"     } ,
            { "245,",               "245",               "245",                "",  "245" ,                  "245"               , "245"                , "245"     } ,
            { "246,",               "246",               "246",                "",  "246" ,                  "246"               , "246"                , "246"     } ,
            { "247,",               "247",               "247",                "",  "247" ,                  "247"               , "247"                , "247"     } ,
            { "248,",               "248",               "248",                "",  "248" ,                  "248"               , "248"                , "248"     } ,
            { "249,",               "249",               "249",                "",  "249" ,                  "249"               , "249"                , "249"     } ,
            { "250,",               "250",               "250",                "",  "250" ,                  "250"               , "250"                , "250"     } ,
            { "251,",               "251",               "251",                "",  "251" ,                  "251"               , "251"                , "251"     } ,
            { "252,",               "252",               "252",                "",  "252" ,                  "252"               , "252"                , "252"     } ,
            { "253,",               "253",               "253",                "",  "253" ,                  "253"               , "253"                , "253"     } ,
            { "254,",               "254",               "254",                "",  "254" ,                  "254"               , "254"                , "254"     } ,
            { "255,",               "255",               "255",                "",  "255" ,                  "255"               , "255"                , "255"     } ,
            { "256,",               "256",               "256",                "",  "256 Flash_Ctrl,2" ,     "256"               , "256"                , "256"     } ,
            { "257,",               "257",               "257",                "",  "257 Flash_SW,0" ,       "257"               , "257"                , "257"     } ,
            { "258,",               "258",               "258",                "",  "258" ,                  "258"               , "258"                , "258"     } ,
            { "259,",               "259",               "259",                "",  "3584 stg_MSG,0" ,       "259"               , "259"                , "259"     } ,
            { "260,",               "260",               "260",                "",  "3585 stg_DMR,0" ,       "260"               , "260"                , "260"     }
            /// 先以259代替3584，260代替3585
        };
        #endregion FPGAreg

        #region FPGA region
        //public static Label lblFPGAtxtf;
        //public static Label lblFPGAkwf;
        //獲取矩陣長度(最外層)
        public static int lblns = FPGAreg.GetUpperBound(0) + 1;     //有2個rank
        public static string[] FPGAtxt = new string[lblns];
        public static string[] FPGAtxtDef = new string[lblns];
        public static Label[] lblFPGAtxt = new Label[lblns];
        public static Label[] lblFPGAkw = new Label[lblns];
        #endregion

        public static string[,] svfpgareg = null;
        private Label[] lblc = new Label[3];

        public uc_FPGAreg()
        {
            InitializeComponent();
        }

        private void uc_FPGAreg_Load(object sender, EventArgs e)
        {
            txtFPGA();
            tme_pgautorun.Interval = 2000;
            mvars.toolTip1.AutoPopDelay = 3000;
            mvars.toolTip1.InitialDelay = 500;
            mvars.toolTip1.ReshowDelay = 500;
            // Force the ToolTip text to be displayed whether or not the form is active.
            mvars.toolTip1.ShowAlways = true;
            gboxFPGAstatus.Location = new Point(147, 7);
            mvars.actFunc = "FPGAreg";
            mvars.FormShow[8] = true;

            cmb_deviceID.Items.Clear();
            for (int i = 0; i < Form1.cmbdeviceid.Items.Count; i++) cmb_deviceID.Items.Add(Form1.cmbdeviceid.Items[i].ToString());
            cmb_deviceID.Text = Form1.cmbdeviceid.Text;

            cmb_FPGAsel.Items.Clear();
            cmb_FPGAsel.Visible = false;
            if (Form1.cmbFPGAsel.Items.Count != 0)
            {
                cmb_FPGAsel.Visible = true;
                for (int i = 0; i < Form1.cmbFPGAsel.Items.Count; i++) cmb_FPGAsel.Items.Add(Form1.cmbFPGAsel.Items[i].ToString());
                cmb_FPGAsel.Text = cmb_FPGAsel.Items[mvars.FPGAsel].ToString();

                if (mvars.deviceID.Substring(0, 2) == "03" && cmb_FPGAsel.FindString(" XB01") != -1)
                {
                    int j = cmb_FPGAsel.FindString(" XB01");
                    cmb_FPGAsel.Text = cmb_FPGAsel.Items[j].ToString();
                }
                else if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06")
                    lbl_FPGAsel.Visible = true;
            }
            mvars.deviceNo = mvars.deviceNo;
        }

        private void txtFPGA()
        {
            lbldip = new Label[8];
            gboxdip = gbox_dip;
            lbldip[0] = lbl_dip8;
            lbldip[1] = lbl_dip7;
            lbldip[2] = lbl_dip6;
            lbldip[3] = lbl_dip5;
            lbldip[4] = lbl_dip4;
            lbldip[5] = lbl_dip3;
            lbldip[6] = lbl_dip2;
            lbldip[7] = lbl_dip1;

            lbldip[0].Tag = "0";
            lbldip[1].Tag = "1";
            lbldip[2].Tag = "2";
            lbldip[3].Tag = "3";
            lbldip[4].Tag = "4";
            lbldip[5].Tag = "5";
            lbldip[6].Tag = "6";
            lbldip[7].Tag = "7";
            gboxdip.Size = new Size(225, 250);

            lblc[0] = lbl_Rv;
            lblc[1] = lbl_Gv;
            lblc[2] = lbl_Bv;

            lblalctrl = new Label[6];
            gboxalctrl = gbox_alctrl;
            lblalctrl[0] = lbl_alctrl0;
            lblalctrl[1] = lbl_alctrl1;
            lblalctrl[2] = lbl_alctrl2;
            lblalctrl[3] = lbl_alctrl3;
            lblalctrl[4] = lbl_alctrl4;
            lblalctrl[5] = lbl_alctrl5;
            lblalctrl[0].Tag = "0";
            lblalctrl[1].Tag = "1";
            lblalctrl[2].Tag = "2";
            lblalctrl[3].Tag = "3";
            lblalctrl[4].Tag = "4";
            lblalctrl[5].Tag = "5";
            gboxalctrl.Location = new Point(81, 415);
            gboxalctrl.Size = new Size(145, 195);

            gboxFPGAstatus = gbox_FPGAstatus;
            gboxFPGAstatus.Location = new Point(147, 7);
            gboxFPGAstatus.Size = new Size(836, 490);


            if (mvars.deviceID.Substring(0, 2) == "02") svFPGAregNo = 0;
            else if (mvars.deviceID.Substring(0, 2) == "03") svFPGAregNo = 1;
            else if (mvars.deviceID.Substring(0, 2) == "04") svFPGAregNo = 2;
            else if (mvars.deviceID.Substring(0, 2) == "05") svFPGAregNo = 4;
            else if (mvars.deviceID.Substring(0, 2) == "06") svFPGAregNo = 5;
            else if (mvars.deviceID.Substring(0, 2) == "10") svFPGAregNo = 6;


            if (mvars.deviceID.Substring(0, 2) == "05")
            {
                #region lblFPGAkw
                lblFPGAkw[0] = lbl_FPGAkw000; lblFPGAkw[1] = lbl_FPGAkw001; lblFPGAkw[2] = lbl_FPGAkw002;
                lblFPGAkw[3] = lbl_FPGAkw003; lblFPGAkw[4] = lbl_FPGAkw004; lblFPGAkw[5] = lbl_FPGAkw005;
                lblFPGAkw[6] = lbl_FPGAkw006; lblFPGAkw[7] = lbl_FPGAkw007; lblFPGAkw[8] = lbl_FPGAkw008;
                lblFPGAkw[9] = lbl_FPGAkw009;
                //lblFPGAkw[10] = lbl_FPGAkw010; lblFPGAkw[11] = lbl_FPGAkw011;
                //lblFPGAkw[12] = lbl_FPGAkw012; lblFPGAkw[13] = lbl_FPGAkw013; lblFPGAkw[14] = lbl_FPGAkw014;
                //lblFPGAkw[15] = lbl_FPGAkw015; 
                lblFPGAkw[16] = lbl_FPGAkw016; lblFPGAkw[17] = lbl_FPGAkw017;
                lblFPGAkw[18] = lbl_FPGAkw018; lblFPGAkw[19] = lbl_FPGAkw019; lblFPGAkw[20] = lbl_FPGAkw020;
                lblFPGAkw[21] = lbl_FPGAkw021; lblFPGAkw[22] = lbl_FPGAkw022;
                //lblFPGAkw[23] = lbl_FPGAkw023;
                //lblFPGAkw[24] = lbl_FPGAkw024; lblFPGAkw[25] = lbl_FPGAkw025; lblFPGAkw[26] = lbl_FPGAkw026;
                //lblFPGAkw[27] = lbl_FPGAkw027; lblFPGAkw[28] = lbl_FPGAkw028; lblFPGAkw[29] = lbl_FPGAkw029;
                //lblFPGAkw[30] = lbl_FPGAkw030; 
                lblFPGAkw[31] = lbl_FPGAkw031; lblFPGAkw[32] = lbl_FPGAkw032;
                lblFPGAkw[33] = lbl_FPGAkw033; lblFPGAkw[34] = lbl_FPGAkw034; lblFPGAkw[35] = lbl_FPGAkw035;
                //lblFPGAkw[36] = lbl_FPGAkw036; lblFPGAkw[37] = lbl_FPGAkw037; lblFPGAkw[38] = lbl_FPGAkw038;
                //lblFPGAkw[39] = lbl_FPGAkw039; lblFPGAkw[40] = lbl_FPGAkw040; lblFPGAkw[41] = lbl_FPGAkw041;
                //lblFPGAkw[42] = lbl_FPGAkw042; lblFPGAkw[43] = lbl_FPGAkw043; lblFPGAkw[44] = lbl_FPGAkw044;
                //lblFPGAkw[45] = lbl_FPGAkw045; lblFPGAkw[46] = lbl_FPGAkw046; lblFPGAkw[47] = lbl_FPGAkw047;
                lblFPGAkw[48] = lbl_FPGAkw048; lblFPGAkw[49] = lbl_FPGAkw049; lblFPGAkw[50] = lbl_FPGAkw050;
                lblFPGAkw[51] = lbl_FPGAkw051; lblFPGAkw[52] = lbl_FPGAkw052;
                lblFPGAkw[53] = lbl_FPGAkw053;
                lblFPGAkw[54] = lbl_FPGAkw054; lblFPGAkw[55] = lbl_FPGAkw055; lblFPGAkw[56] = lbl_FPGAkw056;
                lblFPGAkw[57] = lbl_FPGAkw057; lblFPGAkw[58] = lbl_FPGAkw058; lblFPGAkw[59] = lbl_FPGAkw059;
                //lblFPGAkw[60] = lbl_FPGAkw060; lblFPGAkw[61] = lbl_FPGAkw061; lblFPGAkw[62] = lbl_FPGAkw062;
                //lblFPGAkw[63] = lbl_FPGAkw063; 
                lblFPGAkw[64] = lbl_FPGAkw064; lblFPGAkw[65] = lbl_FPGAkw065;
                lblFPGAkw[66] = lbl_FPGAkw066; lblFPGAkw[67] = lbl_FPGAkw067;
                //lblFPGAkw[68] = lbl_FPGAkw068;
                //lblFPGAkw[69] = lbl_FPGAkw069; lblFPGAkw[70] = lbl_FPGAkw070; lblFPGAkw[71] = lbl_FPGAkw071;
                //lblFPGAkw[72] = lbl_FPGAkw072; lblFPGAkw[73] = lbl_FPGAkw073; lblFPGAkw[74] = lbl_FPGAkw074;
                //lblFPGAkw[75] = lbl_FPGAkw075; lblFPGAkw[76] = lbl_FPGAkw076; lblFPGAkw[77] = lbl_FPGAkw077;
                //lblFPGAkw[78] = lbl_FPGAkw078; lblFPGAkw[79] = lbl_FPGAkw079; 
                lblFPGAkw[80] = lbl_FPGAkw080;
                lblFPGAkw[81] = lbl_FPGAkw081; lblFPGAkw[82] = lbl_FPGAkw082; lblFPGAkw[83] = lbl_FPGAkw083;
                lblFPGAkw[84] = lbl_FPGAkw084; lblFPGAkw[85] = lbl_FPGAkw085; lblFPGAkw[86] = lbl_FPGAkw086;
                lblFPGAkw[87] = lbl_FPGAkw087;
                //lblFPGAkw[88] = lbl_FPGAkw088; lblFPGAkw[89] = lbl_FPGAkw089;
                //lblFPGAkw[90] = lbl_FPGAkw090; lblFPGAkw[91] = lbl_FPGAkw091; lblFPGAkw[92] = lbl_FPGAkw092;
                //lblFPGAkw[93] = lbl_FPGAkw093; lblFPGAkw[94] = lbl_FPGAkw094; lblFPGAkw[95] = lbl_FPGAkw095;
                lblFPGAkw[96] = lbl_FPGAkw096;
                //lblFPGAkw[97] = lbl_FPGAkw097; lblFPGAkw[98] = lbl_FPGAkw098;
                //lblFPGAkw[99] = lbl_FPGAkw099; lblFPGAkw[100] = lbl_FPGAkw100; lblFPGAkw[101] = lbl_FPGAkw101;
                //lblFPGAkw[102] = lbl_FPGAkw102; lblFPGAkw[103] = lbl_FPGAkw103; lblFPGAkw[104] = lbl_FPGAkw104;
                //lblFPGAkw[105] = lbl_FPGAkw105; lblFPGAkw[106] = lbl_FPGAkw106; lblFPGAkw[107] = lbl_FPGAkw107;
                //lblFPGAkw[108] = lbl_FPGAkw108; lblFPGAkw[109] = lbl_FPGAkw109; lblFPGAkw[110] = lbl_FPGAkw110;
                //lblFPGAkw[111] = lbl_FPGAkw111;
                lblFPGAkw[112] = lbl_FPGAkw112; lblFPGAkw[113] = lbl_FPGAkw113;
                lblFPGAkw[114] = lbl_FPGAkw114; lblFPGAkw[115] = lbl_FPGAkw115; lblFPGAkw[116] = lbl_FPGAkw116;
                lblFPGAkw[117] = lbl_FPGAkw117; lblFPGAkw[118] = lbl_FPGAkw118; lblFPGAkw[119] = lbl_FPGAkw119;
                //lblFPGAkw[120] = lbl_FPGAkw120; lblFPGAkw[121] = lbl_FPGAkw121; lblFPGAkw[122] = lbl_FPGAkw122;
                //lblFPGAkw[123] = lbl_FPGAkw123; lblFPGAkw[124] = lbl_FPGAkw124; lblFPGAkw[125] = lbl_FPGAkw125;
                //lblFPGAkw[126] = lbl_FPGAkw126; lblFPGAkw[127] = lbl_FPGAkw127;
                lblFPGAkw[128] = lbl_FPGAkw128;
                //lblFPGAkw[200] = lbl_FPGAkw200; lblFPGAkw[201] = lbl_FPGAkw201; lblFPGAkw[202] = lbl_FPGAkw202;
                //lblFPGAkw[203] = lbl_FPGAkw203; lblFPGAkw[204] = lbl_FPGAkw204; lblFPGAkw[205] = lbl_FPGAkw205;
                //lblFPGAkw[206] = lbl_FPGAkw206; lblFPGAkw[207] = lbl_FPGAkw207; lblFPGAkw[208] = lbl_FPGAkw208;
                //lblFPGAkw[209] = lbl_FPGAkw209; lblFPGAkw[210] = lbl_FPGAkw210; lblFPGAkw[211] = lbl_FPGAkw211;
                //lblFPGAkw[212] = lbl_FPGAkw212; lblFPGAkw[213] = lbl_FPGAkw213; lblFPGAkw[214] = lbl_FPGAkw214;
                //lblFPGAkw[215] = lbl_FPGAkw215; lblFPGAkw[216] = lbl_FPGAkw216; lblFPGAkw[217] = lbl_FPGAkw217;
                //lblFPGAkw[218] = lbl_FPGAkw218; lblFPGAkw[219] = lbl_FPGAkw219; lblFPGAkw[220] = lbl_FPGAkw220;
                //lblFPGAkw[221] = lbl_FPGAkw221;            
                lblFPGAkw[256] = lbl_FPGAkw256; lblFPGAkw[257] = lbl_FPGAkw257;
                lblFPGAkw[259] = lbl_FPGAkw3584; lblFPGAkw[260] = lbl_FPGAkw3585;
                #endregion

                #region lblFPGAtxt
                lblFPGAtxt[0] = lbl_FPGAtxt000; lblFPGAtxt[1] = lbl_FPGAtxt001; lblFPGAtxt[2] = lbl_FPGAtxt002;
                lblFPGAtxt[3] = lbl_FPGAtxt003; lblFPGAtxt[4] = lbl_FPGAtxt004; lblFPGAtxt[5] = lbl_FPGAtxt005;
                lblFPGAtxt[6] = lbl_FPGAtxt006; lblFPGAtxt[7] = lbl_FPGAtxt007; lblFPGAtxt[8] = lbl_FPGAtxt008;
                lblFPGAtxt[9] = lbl_FPGAtxt009;
                //lblFPGAtxt[10] = lbl_FPGAtxt010; lblFPGAtxt[11] = lbl_FPGAtxt011;
                //lblFPGAtxt[12] = lbl_FPGAtxt012; lblFPGAtxt[13] = lbl_FPGAtxt013; lblFPGAtxt[14] = lbl_FPGAtxt014;
                //lblFPGAtxt[15] = lbl_FPGAtxt015; 
                lblFPGAtxt[16] = lbl_FPGAtxt016; lblFPGAtxt[17] = lbl_FPGAtxt017;
                lblFPGAtxt[18] = lbl_FPGAtxt018; lblFPGAtxt[19] = lbl_FPGAtxt019; lblFPGAtxt[20] = lbl_FPGAtxt020;
                lblFPGAtxt[21] = lbl_FPGAtxt021; lblFPGAtxt[22] = lbl_FPGAtxt022;
                //lblFPGAtxt[23] = lbl_FPGAtxt023;
                //lblFPGAtxt[24] = lbl_FPGAtxt024; lblFPGAtxt[25] = lbl_FPGAtxt025; lblFPGAtxt[26] = lbl_FPGAtxt026;
                //lblFPGAtxt[27] = lbl_FPGAtxt027; lblFPGAtxt[28] = lbl_FPGAtxt028; lblFPGAtxt[29] = lbl_FPGAtxt029;
                //lblFPGAtxt[30] = lbl_FPGAtxt030; 
                lblFPGAtxt[31] = lbl_FPGAtxt031; lblFPGAtxt[32] = lbl_FPGAtxt032;
                lblFPGAtxt[33] = lbl_FPGAtxt033; lblFPGAtxt[34] = lbl_FPGAtxt034; lblFPGAtxt[35] = lbl_FPGAtxt035;
                //lblFPGAtxt[36] = lbl_FPGAtxt036; lblFPGAtxt[37] = lbl_FPGAtxt037; lblFPGAtxt[38] = lbl_FPGAtxt038;
                //lblFPGAtxt[39] = lbl_FPGAtxt039; lblFPGAtxt[40] = lbl_FPGAtxt040; lblFPGAtxt[41] = lbl_FPGAtxt041;
                //lblFPGAtxt[42] = lbl_FPGAtxt042; lblFPGAtxt[43] = lbl_FPGAtxt043; lblFPGAtxt[44] = lbl_FPGAtxt044;
                //lblFPGAtxt[45] = lbl_FPGAtxt045; lblFPGAtxt[46] = lbl_FPGAtxt046; lblFPGAtxt[47] = lbl_FPGAtxt047;
                lblFPGAtxt[48] = lbl_FPGAtxt048; lblFPGAtxt[49] = lbl_FPGAtxt049; lblFPGAtxt[50] = lbl_FPGAtxt050;
                lblFPGAtxt[51] = lbl_FPGAtxt051; lblFPGAtxt[52] = lbl_FPGAtxt052; lblFPGAtxt[53] = lbl_FPGAtxt053;
                lblFPGAtxt[54] = lbl_FPGAtxt054; lblFPGAtxt[55] = lbl_FPGAtxt055; lblFPGAtxt[56] = lbl_FPGAtxt056;
                lblFPGAtxt[57] = lbl_FPGAtxt057; lblFPGAtxt[58] = lbl_FPGAtxt058; lblFPGAtxt[59] = lbl_FPGAtxt059;
                //lblFPGAtxt[60] = lbl_FPGAtxt060; lblFPGAtxt[61] = lbl_FPGAtxt061; lblFPGAtxt[62] = lbl_FPGAtxt062;
                //lblFPGAtxt[63] = lbl_FPGAtxt063; 
                lblFPGAtxt[64] = lbl_FPGAtxt064; lblFPGAtxt[65] = lbl_FPGAtxt065;
                lblFPGAtxt[66] = lbl_FPGAtxt066; lblFPGAtxt[67] = lbl_FPGAtxt067;
                //lblFPGAtxt[68] = lbl_FPGAtxt068;
                //lblFPGAtxt[69] = lbl_FPGAtxt069; lblFPGAtxt[70] = lbl_FPGAtxt070; lblFPGAtxt[71] = lbl_FPGAtxt071;
                //lblFPGAtxt[72] = lbl_FPGAtxt072; lblFPGAtxt[73] = lbl_FPGAtxt073; lblFPGAtxt[74] = lbl_FPGAtxt074;
                //lblFPGAtxt[75] = lbl_FPGAtxt075; lblFPGAtxt[76] = lbl_FPGAtxt076; lblFPGAtxt[77] = lbl_FPGAtxt077;
                //lblFPGAtxt[78] = lbl_FPGAtxt078; lblFPGAtxt[79] = lbl_FPGAtxt079;
                lblFPGAtxt[80] = lbl_FPGAtxt080;
                lblFPGAtxt[81] = lbl_FPGAtxt081; lblFPGAtxt[82] = lbl_FPGAtxt082; lblFPGAtxt[83] = lbl_FPGAtxt083;
                lblFPGAtxt[84] = lbl_FPGAtxt084; lblFPGAtxt[85] = lbl_FPGAtxt085; lblFPGAtxt[86] = lbl_FPGAtxt086;
                lblFPGAtxt[87] = lbl_FPGAtxt087;
                //lblFPGAtxt[88] = lbl_FPGAtxt088; lblFPGAtxt[89] = lbl_FPGAtxt089;
                //lblFPGAtxt[90] = lbl_FPGAtxt090; lblFPGAtxt[91] = lbl_FPGAtxt091; lblFPGAtxt[92] = lbl_FPGAtxt092;
                //lblFPGAtxt[93] = lbl_FPGAtxt093; lblFPGAtxt[94] = lbl_FPGAtxt094; lblFPGAtxt[95] = lbl_FPGAtxt095;
                lblFPGAtxt[96] = lbl_FPGAtxt096;
                //lblFPGAtxt[97] = lbl_FPGAtxt097; lblFPGAtxt[98] = lbl_FPGAtxt098;
                //lblFPGAtxt[99] = lbl_FPGAtxt099; lblFPGAtxt[100] = lbl_FPGAtxt100; lblFPGAtxt[101] = lbl_FPGAtxt101;
                //lblFPGAtxt[102] = lbl_FPGAtxt102; lblFPGAtxt[103] = lbl_FPGAtxt103; lblFPGAtxt[104] = lbl_FPGAtxt104;
                //lblFPGAtxt[105] = lbl_FPGAtxt105; lblFPGAtxt[106] = lbl_FPGAtxt106; lblFPGAtxt[107] = lbl_FPGAtxt107;
                //lblFPGAtxt[108] = lbl_FPGAtxt108; lblFPGAtxt[109] = lbl_FPGAtxt109; lblFPGAtxt[110] = lbl_FPGAtxt110;
                //lblFPGAtxt[111] = lbl_FPGAtxt111;
                lblFPGAtxt[112] = lbl_FPGAtxt112; lblFPGAtxt[113] = lbl_FPGAtxt113;
                lblFPGAtxt[114] = lbl_FPGAtxt114; lblFPGAtxt[115] = lbl_FPGAtxt115; lblFPGAtxt[116] = lbl_FPGAtxt116;
                lblFPGAtxt[117] = lbl_FPGAtxt117; lblFPGAtxt[118] = lbl_FPGAtxt118; lblFPGAtxt[119] = lbl_FPGAtxt119;
                //lblFPGAtxt[120] = lbl_FPGAtxt120; lblFPGAtxt[121] = lbl_FPGAtxt121; lblFPGAtxt[122] = lbl_FPGAtxt122;
                //lblFPGAtxt[123] = lbl_FPGAtxt123; lblFPGAtxt[124] = lbl_FPGAtxt124; lblFPGAtxt[125] = lbl_FPGAtxt125;
                //lblFPGAtxt[126] = lbl_FPGAtxt126; lblFPGAtxt[127] = lbl_FPGAtxt127;
                lblFPGAtxt[128] = lbl_FPGAtxt128;
                //lblFPGAtxt[200] = lbl_FPGAtxt200; lblFPGAtxt[201] = lbl_FPGAtxt201; lblFPGAtxt[202] = lbl_FPGAtxt202;
                //lblFPGAtxt[203] = lbl_FPGAtxt203; lblFPGAtxt[204] = lbl_FPGAtxt204; lblFPGAtxt[205] = lbl_FPGAtxt205;
                //lblFPGAtxt[206] = lbl_FPGAtxt206; lblFPGAtxt[207] = lbl_FPGAtxt207; lblFPGAtxt[208] = lbl_FPGAtxt208;
                //lblFPGAtxt[209] = lbl_FPGAtxt209; lblFPGAtxt[210] = lbl_FPGAtxt210; lblFPGAtxt[211] = lbl_FPGAtxt211;
                //lblFPGAtxt[212] = lbl_FPGAtxt212; lblFPGAtxt[213] = lbl_FPGAtxt213; lblFPGAtxt[214] = lbl_FPGAtxt214;
                //lblFPGAtxt[215] = lbl_FPGAtxt215; lblFPGAtxt[216] = lbl_FPGAtxt216; lblFPGAtxt[217] = lbl_FPGAtxt217;
                //lblFPGAtxt[218] = lbl_FPGAtxt218; lblFPGAtxt[219] = lbl_FPGAtxt219; lblFPGAtxt[220] = lbl_FPGAtxt220;
                //lblFPGAtxt[221] = lbl_FPGAtxt221;
                lblFPGAtxt[256] = lbl_FPGAtxt256; lblFPGAtxt[257] = lbl_FPGAtxt257;
                lblFPGAtxt[259] = lbl_FPGAtxt3584; lblFPGAtxt[260] = lbl_FPGAtxt3585;
                #endregion

                mvars.toolTip1.SetToolTip(lblFPGAkw[0], "DIP1 ~ DIP8");

                mvars.FPGA_GRAY_R = 0x30;
                mvars.FPGA_GRAY_G = 0x31;
                mvars.FPGA_GRAY_B = 0x32;
                //mvars.FPGA_X_START = 108;
                //mvars.FPGA_X_END = 109;
                //mvars.FPGA_Y_START = 110;
                //mvars.FPGA_Y_END = 111;
                trackBar1.Tag = mvars.FPGA_GRAY_R;
                trackBar2.Tag = mvars.FPGA_GRAY_G;
                trackBar3.Tag = mvars.FPGA_GRAY_B;

            }
            else if (mvars.deviceID.Substring(0, 2) == "06")
            {
                #region lblFPGAkw
                lblFPGAkw[0] = lbl_FPGAkw000; lblFPGAkw[1] = lbl_FPGAkw001; lblFPGAkw[2] = lbl_FPGAkw002;
                lblFPGAkw[3] = lbl_FPGAkw003; lblFPGAkw[4] = lbl_FPGAkw004; lblFPGAkw[5] = lbl_FPGAkw005;
                lblFPGAkw[6] = lbl_FPGAkw006; lblFPGAkw[7] = lbl_FPGAkw007; lblFPGAkw[8] = lbl_FPGAkw008;
                lblFPGAkw[9] = lbl_FPGAkw009; lblFPGAkw[10] = lbl_FPGAkw010; lblFPGAkw[11] = lbl_FPGAkw011;
                lblFPGAkw[12] = lbl_FPGAkw012; lblFPGAkw[13] = lbl_FPGAkw013; lblFPGAkw[14] = lbl_FPGAkw014;
                lblFPGAkw[15] = lbl_FPGAkw015; lblFPGAkw[16] = lbl_FPGAkw016; lblFPGAkw[17] = lbl_FPGAkw017;
                lblFPGAkw[18] = lbl_FPGAkw018; lblFPGAkw[19] = lbl_FPGAkw019; lblFPGAkw[20] = lbl_FPGAkw020;
                lblFPGAkw[21] = lbl_FPGAkw021; lblFPGAkw[22] = lbl_FPGAkw022; lblFPGAkw[23] = lbl_FPGAkw023;
                //lblFPGAkw[24] = lbl_FPGAkw024; 
                lblFPGAkw[25] = lbl_FPGAkw025; //lblFPGAkw[26] = lbl_FPGAkw026;
                //lblFPGAkw[27] = lbl_FPGAkw027; lblFPGAkw[28] = lbl_FPGAkw028; lblFPGAkw[29] = lbl_FPGAkw029;
                //lblFPGAkw[30] = lbl_FPGAkw030; 
                lblFPGAkw[31] = lbl_FPGAkw031; //lblFPGAkw[32] = lbl_FPGAkw032; lblFPGAkw[33] = lbl_FPGAkw033; lblFPGAkw[34] = lbl_FPGAkw034; lblFPGAkw[35] = lbl_FPGAkw035;
                //lblFPGAkw[36] = lbl_FPGAkw036; lblFPGAkw[37] = lbl_FPGAkw037; lblFPGAkw[38] = lbl_FPGAkw038;
                //lblFPGAkw[39] = lbl_FPGAkw039; lblFPGAkw[40] = lbl_FPGAkw040; lblFPGAkw[41] = lbl_FPGAkw041;
                //lblFPGAkw[42] = lbl_FPGAkw042; lblFPGAkw[43] = lbl_FPGAkw043; lblFPGAkw[44] = lbl_FPGAkw044;
                //lblFPGAkw[45] = lbl_FPGAkw045; lblFPGAkw[46] = lbl_FPGAkw046; lblFPGAkw[47] = lbl_FPGAkw047;
                //lblFPGAkw[48] = lbl_FPGAkw048; lblFPGAkw[49] = lbl_FPGAkw049; 
                lblFPGAkw[50] = lbl_FPGAkw050; lblFPGAkw[51] = lbl_FPGAkw051; lblFPGAkw[52] = lbl_FPGAkw052;
                lblFPGAkw[53] = lbl_FPGAkw053; lblFPGAkw[54] = lbl_FPGAkw054; lblFPGAkw[55] = lbl_FPGAkw055;
                lblFPGAkw[56] = lbl_FPGAkw056; lblFPGAkw[57] = lbl_FPGAkw057; lblFPGAkw[58] = lbl_FPGAkw058;
                lblFPGAkw[59] = lbl_FPGAkw059; lblFPGAkw[60] = lbl_FPGAkw060; lblFPGAkw[61] = lbl_FPGAkw061;
                //lblFPGAkw[62] = lbl_FPGAkw062;
                lblFPGAkw[63] = lbl_FPGAkw063;
                //lblFPGAkw[64] = lbl_FPGAkw064; lblFPGAkw[65] = lbl_FPGAkw065; lblFPGAkw[66] = lbl_FPGAkw066; 
                //lblFPGAkw[67] = lbl_FPGAkw067; lblFPGAkw[68] = lbl_FPGAkw068; lblFPGAkw[69] = lbl_FPGAkw069; 
                lblFPGAkw[70] = lbl_FPGAkw070; lblFPGAkw[71] = lbl_FPGAkw071; lblFPGAkw[72] = lbl_FPGAkw072;
                lblFPGAkw[73] = lbl_FPGAkw073; lblFPGAkw[74] = lbl_FPGAkw074; lblFPGAkw[75] = lbl_FPGAkw075;
                lblFPGAkw[76] = lbl_FPGAkw076; lblFPGAkw[77] = lbl_FPGAkw077; lblFPGAkw[78] = lbl_FPGAkw078;
                lblFPGAkw[79] = lbl_FPGAkw079; lblFPGAkw[80] = lbl_FPGAkw080; lblFPGAkw[81] = lbl_FPGAkw081;
                //lblFPGAkw[82] = lbl_FPGAkw082; lblFPGAkw[83] = lbl_FPGAkw083;
                //lblFPGAkw[84] = lbl_FPGAkw084; lblFPGAkw[85] = lbl_FPGAkw085; lblFPGAkw[86] = lbl_FPGAkw086;
                //lblFPGAkw[87] = lbl_FPGAkw087;
                //lblFPGAkw[88] = lbl_FPGAkw088; lblFPGAkw[89] = lbl_FPGAkw089;
                //lblFPGAkw[90] = lbl_FPGAkw090; lblFPGAkw[91] = lbl_FPGAkw091; lblFPGAkw[92] = lbl_FPGAkw092;
                //lblFPGAkw[93] = lbl_FPGAkw093; lblFPGAkw[94] = lbl_FPGAkw094; lblFPGAkw[95] = lbl_FPGAkw095;
                //lblFPGAkw[96] = lbl_FPGAkw096;
                //lblFPGAkw[97] = lbl_FPGAkw097; lblFPGAkw[98] = lbl_FPGAkw098;
                //lblFPGAkw[99] = lbl_FPGAkw099; 
                lblFPGAkw[100] = lbl_FPGAkw100; lblFPGAkw[101] = lbl_FPGAkw101; lblFPGAkw[102] = lbl_FPGAkw102;
                lblFPGAkw[103] = lbl_FPGAkw103; lblFPGAkw[104] = lbl_FPGAkw104; lblFPGAkw[105] = lbl_FPGAkw105;
                lblFPGAkw[106] = lbl_FPGAkw106; lblFPGAkw[107] = lbl_FPGAkw107; lblFPGAkw[108] = lbl_FPGAkw108;
                lblFPGAkw[109] = lbl_FPGAkw109; lblFPGAkw[110] = lbl_FPGAkw110; lblFPGAkw[111] = lbl_FPGAkw111;
                lblFPGAkw[112] = lbl_FPGAkw112; lblFPGAkw[113] = lbl_FPGAkw113; lblFPGAkw[114] = lbl_FPGAkw114;
                lblFPGAkw[115] = lbl_FPGAkw115; lblFPGAkw[116] = lbl_FPGAkw116; lblFPGAkw[117] = lbl_FPGAkw117;
                lblFPGAkw[118] = lbl_FPGAkw118; lblFPGAkw[119] = lbl_FPGAkw119; lblFPGAkw[120] = lbl_FPGAkw120;
                //lblFPGAkw[121] = lbl_FPGAkw121; lblFPGAkw[122] = lbl_FPGAkw122;
                //lblFPGAkw[123] = lbl_FPGAkw123; lblFPGAkw[124] = lbl_FPGAkw124; lblFPGAkw[125] = lbl_FPGAkw125;
                //lblFPGAkw[126] = lbl_FPGAkw126; lblFPGAkw[127] = lbl_FPGAkw127; lblFPGAkw[128] = lbl_FPGAkw128;
                //lblFPGAkw[200] = lbl_FPGAkw200; lblFPGAkw[201] = lbl_FPGAkw201; lblFPGAkw[202] = lbl_FPGAkw202;
                //lblFPGAkw[203] = lbl_FPGAkw203; lblFPGAkw[204] = lbl_FPGAkw204; lblFPGAkw[205] = lbl_FPGAkw205;
                //lblFPGAkw[206] = lbl_FPGAkw206; lblFPGAkw[207] = lbl_FPGAkw207; lblFPGAkw[208] = lbl_FPGAkw208;
                //lblFPGAkw[209] = lbl_FPGAkw209; lblFPGAkw[210] = lbl_FPGAkw210; lblFPGAkw[211] = lbl_FPGAkw211;
                //lblFPGAkw[212] = lbl_FPGAkw212; lblFPGAkw[213] = lbl_FPGAkw213; lblFPGAkw[214] = lbl_FPGAkw214;
                //lblFPGAkw[215] = lbl_FPGAkw215; lblFPGAkw[216] = lbl_FPGAkw216; lblFPGAkw[217] = lbl_FPGAkw217;
                //lblFPGAkw[218] = lbl_FPGAkw218; lblFPGAkw[219] = lbl_FPGAkw219; lblFPGAkw[220] = lbl_FPGAkw220;
                //lblFPGAkw[221] = lbl_FPGAkw221;            
                lblFPGAkw[200] = lbl_FPGAkw200; lblFPGAkw[201] = lbl_FPGAkw201; lblFPGAkw[202] = lbl_FPGAkw202;
                lblFPGAkw[203] = lbl_FPGAkw203; lblFPGAkw[204] = lbl_FPGAkw204; lblFPGAkw[205] = lbl_FPGAkw205;
                lblFPGAkw[206] = lbl_FPGAkw206;
                #endregion

                #region lblFPGAtxt
                lblFPGAtxt[0] = lbl_FPGAtxt000; lblFPGAtxt[1] = lbl_FPGAtxt001; lblFPGAtxt[2] = lbl_FPGAtxt002;
                lblFPGAtxt[0] = lbl_FPGAtxt000; lblFPGAtxt[1] = lbl_FPGAtxt001; lblFPGAtxt[2] = lbl_FPGAtxt002;
                lblFPGAtxt[3] = lbl_FPGAtxt003; lblFPGAtxt[4] = lbl_FPGAtxt004; lblFPGAtxt[5] = lbl_FPGAtxt005;
                lblFPGAtxt[6] = lbl_FPGAtxt006; lblFPGAtxt[7] = lbl_FPGAtxt007; lblFPGAtxt[8] = lbl_FPGAtxt008;
                lblFPGAtxt[9] = lbl_FPGAtxt009; lblFPGAtxt[10] = lbl_FPGAtxt010; lblFPGAtxt[11] = lbl_FPGAtxt011;
                lblFPGAtxt[12] = lbl_FPGAtxt012; lblFPGAtxt[13] = lbl_FPGAtxt013; lblFPGAtxt[14] = lbl_FPGAtxt014;
                lblFPGAtxt[15] = lbl_FPGAtxt015; lblFPGAtxt[16] = lbl_FPGAtxt016; lblFPGAtxt[17] = lbl_FPGAtxt017;
                lblFPGAtxt[18] = lbl_FPGAtxt018; lblFPGAtxt[19] = lbl_FPGAtxt019; lblFPGAtxt[20] = lbl_FPGAtxt020;
                lblFPGAtxt[21] = lbl_FPGAtxt021; lblFPGAtxt[22] = lbl_FPGAtxt022; lblFPGAtxt[23] = lbl_FPGAtxt023;
                //lblFPGAtxt[24] = lbl_FPGAtxt024; 
                lblFPGAtxt[25] = lbl_FPGAtxt025; //lblFPGAtxt[26] = lbl_FPGAtxt026;
                //lblFPGAtxt[27] = lbl_FPGAtxt027; lblFPGAtxt[28] = lbl_FPGAtxt028; lblFPGAtxt[29] = lbl_FPGAtxt029;
                //lblFPGAtxt[30] = lbl_FPGAtxt030; 
                lblFPGAtxt[31] = lbl_FPGAtxt031; //lblFPGAtxt[32] = lbl_FPGAtxt032; lblFPGAtxt[33] = lbl_FPGAtxt033; lblFPGAtxt[34] = lbl_FPGAtxt034; lblFPGAtxt[35] = lbl_FPGAtxt035;
                //lblFPGAtxt[36] = lbl_FPGAtxt036; lblFPGAtxt[37] = lbl_FPGAtxt037; lblFPGAtxt[38] = lbl_FPGAtxt038;
                //lblFPGAtxt[39] = lbl_FPGAtxt039; lblFPGAtxt[40] = lbl_FPGAtxt040; lblFPGAtxt[41] = lbl_FPGAtxt041;
                //lblFPGAtxt[42] = lbl_FPGAtxt042; lblFPGAtxt[43] = lbl_FPGAtxt043; lblFPGAtxt[44] = lbl_FPGAtxt044;
                //lblFPGAtxt[45] = lbl_FPGAtxt045; lblFPGAtxt[46] = lbl_FPGAtxt046; lblFPGAtxt[47] = lbl_FPGAtxt047;
                //lblFPGAtxt[48] = lbl_FPGAtxt048; lblFPGAtxt[49] = lbl_FPGAtxt049; 
                lblFPGAtxt[50] = lbl_FPGAtxt050; lblFPGAtxt[51] = lbl_FPGAtxt051; lblFPGAtxt[52] = lbl_FPGAtxt052;
                lblFPGAtxt[53] = lbl_FPGAtxt053; lblFPGAtxt[54] = lbl_FPGAtxt054; lblFPGAtxt[55] = lbl_FPGAtxt055;
                lblFPGAtxt[56] = lbl_FPGAtxt056; lblFPGAtxt[57] = lbl_FPGAtxt057; lblFPGAtxt[58] = lbl_FPGAtxt058;
                lblFPGAtxt[59] = lbl_FPGAtxt059; lblFPGAtxt[60] = lbl_FPGAtxt060; lblFPGAtxt[61] = lbl_FPGAtxt061;
                //lblFPGAtxt[62] = lbl_FPGAtxt062;
                lblFPGAtxt[63] = lbl_FPGAtxt063;
                //lblFPGAtxt[64] = lbl_FPGAtxt064; lblFPGAtxt[65] = lbl_FPGAtxt065; lblFPGAtxt[66] = lbl_FPGAtxt066; 
                //lblFPGAtxt[67] = lbl_FPGAtxt067; lblFPGAtxt[68] = lbl_FPGAtxt068; lblFPGAtxt[69] = lbl_FPGAtxt069; 
                lblFPGAtxt[70] = lbl_FPGAtxt070; lblFPGAtxt[71] = lbl_FPGAtxt071; lblFPGAtxt[72] = lbl_FPGAtxt072;
                lblFPGAtxt[73] = lbl_FPGAtxt073; lblFPGAtxt[74] = lbl_FPGAtxt074; lblFPGAtxt[75] = lbl_FPGAtxt075;
                lblFPGAtxt[76] = lbl_FPGAtxt076; lblFPGAtxt[77] = lbl_FPGAtxt077; lblFPGAtxt[78] = lbl_FPGAtxt078;
                lblFPGAtxt[79] = lbl_FPGAtxt079; lblFPGAtxt[80] = lbl_FPGAtxt080; lblFPGAtxt[81] = lbl_FPGAtxt081;
                //lblFPGAtxt[82] = lbl_FPGAtxt082; lblFPGAtxt[83] = lbl_FPGAtxt083;
                //lblFPGAtxt[84] = lbl_FPGAtxt084; lblFPGAtxt[85] = lbl_FPGAtxt085; lblFPGAtxt[86] = lbl_FPGAtxt086;
                //lblFPGAtxt[87] = lbl_FPGAtxt087;
                //lblFPGAtxt[88] = lbl_FPGAtxt088; lblFPGAtxt[89] = lbl_FPGAtxt089;
                //lblFPGAtxt[90] = lbl_FPGAtxt090; lblFPGAtxt[91] = lbl_FPGAtxt091; lblFPGAtxt[92] = lbl_FPGAtxt092;
                //lblFPGAtxt[93] = lbl_FPGAtxt093; lblFPGAtxt[94] = lbl_FPGAtxt094; lblFPGAtxt[95] = lbl_FPGAtxt095;
                //lblFPGAtxt[96] = lbl_FPGAtxt096;
                //lblFPGAtxt[97] = lbl_FPGAtxt097; lblFPGAtxt[98] = lbl_FPGAtxt098;
                //lblFPGAtxt[99] = lbl_FPGAtxt099; 
                lblFPGAtxt[100] = lbl_FPGAtxt100; lblFPGAtxt[101] = lbl_FPGAtxt101; lblFPGAtxt[102] = lbl_FPGAtxt102;
                lblFPGAtxt[103] = lbl_FPGAtxt103; lblFPGAtxt[104] = lbl_FPGAtxt104; lblFPGAtxt[105] = lbl_FPGAtxt105;
                lblFPGAtxt[106] = lbl_FPGAtxt106; lblFPGAtxt[107] = lbl_FPGAtxt107; lblFPGAtxt[108] = lbl_FPGAtxt108;
                lblFPGAtxt[109] = lbl_FPGAtxt109; lblFPGAtxt[110] = lbl_FPGAtxt110; lblFPGAtxt[111] = lbl_FPGAtxt111;
                lblFPGAtxt[112] = lbl_FPGAtxt112; lblFPGAtxt[113] = lbl_FPGAtxt113; lblFPGAtxt[114] = lbl_FPGAtxt114;
                lblFPGAtxt[115] = lbl_FPGAtxt115; lblFPGAtxt[116] = lbl_FPGAtxt116; lblFPGAtxt[117] = lbl_FPGAtxt117;
                lblFPGAtxt[118] = lbl_FPGAtxt118; lblFPGAtxt[119] = lbl_FPGAtxt119; lblFPGAtxt[120] = lbl_FPGAtxt120;
                //lblFPGAtxt[121] = lbl_FPGAtxt121; lblFPGAtxt[122] = lbl_FPGAtxt122;
                //lblFPGAtxt[123] = lbl_FPGAtxt123; lblFPGAtxt[124] = lbl_FPGAtxt124; lblFPGAtxt[125] = lbl_FPGAtxt125;
                //lblFPGAtxt[126] = lbl_FPGAtxt126; lblFPGAtxt[127] = lbl_FPGAtxt127; lblFPGAtxt[128] = lbl_FPGAtxt128;
                //lblFPGAtxt[200] = lbl_FPGAtxt200; lblFPGAtxt[201] = lbl_FPGAtxt201; lblFPGAtxt[202] = lbl_FPGAtxt202;
                //lblFPGAtxt[203] = lbl_FPGAtxt203; lblFPGAtxt[204] = lbl_FPGAtxt204; lblFPGAtxt[205] = lbl_FPGAtxt205;
                //lblFPGAtxt[206] = lbl_FPGAtxt206; lblFPGAtxt[207] = lbl_FPGAtxt207; lblFPGAtxt[208] = lbl_FPGAtxt208;
                //lblFPGAtxt[209] = lbl_FPGAtxt209; lblFPGAtxt[210] = lbl_FPGAtxt210; lblFPGAtxt[211] = lbl_FPGAtxt211;
                //lblFPGAtxt[212] = lbl_FPGAtxt212; lblFPGAtxt[213] = lbl_FPGAtxt213; lblFPGAtxt[214] = lbl_FPGAtxt214;
                //lblFPGAtxt[215] = lbl_FPGAtxt215; lblFPGAtxt[216] = lbl_FPGAtxt216; lblFPGAtxt[217] = lbl_FPGAtxt217;
                //lblFPGAtxt[218] = lbl_FPGAtxt218; lblFPGAtxt[219] = lbl_FPGAtxt219; lblFPGAtxt[220] = lbl_FPGAtxt220;
                //lblFPGAtxt[221] = lbl_FPGAtxt221;            
                lblFPGAtxt[200] = lbl_FPGAtxt200; lblFPGAtxt[201] = lbl_FPGAtxt201; lblFPGAtxt[202] = lbl_FPGAtxt202;
                lblFPGAtxt[203] = lbl_FPGAtxt203; lblFPGAtxt[204] = lbl_FPGAtxt204; lblFPGAtxt[205] = lbl_FPGAtxt205;
                lblFPGAtxt[206] = lbl_FPGAtxt206;
                #endregion

                mvars.FPGA_GRAY_R = 0x30;
                mvars.FPGA_GRAY_G = 0x31;
                mvars.FPGA_GRAY_B = 0x32;
                //mvars.FPGA_X_START = 108;
                //mvars.FPGA_X_END = 109;
                //mvars.FPGA_Y_START = 110;
                //mvars.FPGA_Y_END = 111;
                trackBar1.Tag = mvars.FPGA_GRAY_R;
                trackBar2.Tag = mvars.FPGA_GRAY_G;
                trackBar3.Tag = mvars.FPGA_GRAY_B;


            }
            else if (mvars.deviceID.Substring(0, 2) == "10")
            {
                #region lblFPGAkw
                lblFPGAkw[0] = lbl_FPGAkw000; lblFPGAkw[1] = lbl_FPGAkw001; lblFPGAkw[2] = lbl_FPGAkw002;
                lblFPGAkw[3] = lbl_FPGAkw003; lblFPGAkw[4] = lbl_FPGAkw004; lblFPGAkw[5] = lbl_FPGAkw005;
                lblFPGAkw[6] = lbl_FPGAkw006; lblFPGAkw[7] = lbl_FPGAkw007; lblFPGAkw[8] = lbl_FPGAkw008;
                lblFPGAkw[9] = lbl_FPGAkw009;
                //lblFPGAkw[10] = lbl_FPGAkw010; lblFPGAkw[11] = lbl_FPGAkw011;
                //lblFPGAkw[12] = lbl_FPGAkw012; lblFPGAkw[13] = lbl_FPGAkw013; lblFPGAkw[14] = lbl_FPGAkw014;
                //lblFPGAkw[15] = lbl_FPGAkw015; 
                lblFPGAkw[16] = lbl_FPGAkw016; lblFPGAkw[17] = lbl_FPGAkw017;
                lblFPGAkw[18] = lbl_FPGAkw018; lblFPGAkw[19] = lbl_FPGAkw019; lblFPGAkw[20] = lbl_FPGAkw020;
                lblFPGAkw[21] = lbl_FPGAkw021; lblFPGAkw[22] = lbl_FPGAkw022;
                //lblFPGAkw[23] = lbl_FPGAkw023;
                //lblFPGAkw[24] = lbl_FPGAkw024; lblFPGAkw[25] = lbl_FPGAkw025; lblFPGAkw[26] = lbl_FPGAkw026;
                //lblFPGAkw[27] = lbl_FPGAkw027; lblFPGAkw[28] = lbl_FPGAkw028; lblFPGAkw[29] = lbl_FPGAkw029;
                //lblFPGAkw[30] = lbl_FPGAkw030; lblFPGAkw[31] = lbl_FPGAkw031; 
                lblFPGAkw[32] = lbl_FPGAkw032;
                lblFPGAkw[33] = lbl_FPGAkw033; lblFPGAkw[34] = lbl_FPGAkw034; lblFPGAkw[35] = lbl_FPGAkw035;
                //lblFPGAkw[36] = lbl_FPGAkw036; lblFPGAkw[37] = lbl_FPGAkw037; lblFPGAkw[38] = lbl_FPGAkw038;
                //lblFPGAkw[39] = lbl_FPGAkw039; lblFPGAkw[40] = lbl_FPGAkw040; lblFPGAkw[41] = lbl_FPGAkw041;
                //lblFPGAkw[42] = lbl_FPGAkw042; lblFPGAkw[43] = lbl_FPGAkw043; lblFPGAkw[44] = lbl_FPGAkw044;
                //lblFPGAkw[45] = lbl_FPGAkw045; lblFPGAkw[46] = lbl_FPGAkw046; lblFPGAkw[47] = lbl_FPGAkw047;
                lblFPGAkw[48] = lbl_FPGAkw048; lblFPGAkw[49] = lbl_FPGAkw049; lblFPGAkw[50] = lbl_FPGAkw050;
                lblFPGAkw[51] = lbl_FPGAkw051; lblFPGAkw[52] = lbl_FPGAkw052;
                //lblFPGAkw[53] = lbl_FPGAkw053;
                //lblFPGAkw[54] = lbl_FPGAkw054; lblFPGAkw[55] = lbl_FPGAkw055; lblFPGAkw[56] = lbl_FPGAkw056;
                //lblFPGAkw[57] = lbl_FPGAkw057; lblFPGAkw[58] = lbl_FPGAkw058; lblFPGAkw[59] = lbl_FPGAkw059;
                //lblFPGAkw[60] = lbl_FPGAkw060; lblFPGAkw[61] = lbl_FPGAkw061; lblFPGAkw[62] = lbl_FPGAkw062;
                //lblFPGAkw[63] = lbl_FPGAkw063; 
                lblFPGAkw[64] = lbl_FPGAkw064; lblFPGAkw[65] = lbl_FPGAkw065; lblFPGAkw[66] = lbl_FPGAkw066;
                lblFPGAkw[67] = lbl_FPGAkw067; lblFPGAkw[68] = lbl_FPGAkw068;
                //lblFPGAkw[69] = lbl_FPGAkw069; lblFPGAkw[70] = lbl_FPGAkw070; lblFPGAkw[71] = lbl_FPGAkw071;
                //lblFPGAkw[72] = lbl_FPGAkw072; lblFPGAkw[73] = lbl_FPGAkw073; lblFPGAkw[74] = lbl_FPGAkw074;
                //lblFPGAkw[75] = lbl_FPGAkw075; lblFPGAkw[76] = lbl_FPGAkw076; lblFPGAkw[77] = lbl_FPGAkw077;
                //lblFPGAkw[78] = lbl_FPGAkw078; lblFPGAkw[79] = lbl_FPGAkw079; 
                lblFPGAkw[80] = lbl_FPGAkw080;
                lblFPGAkw[81] = lbl_FPGAkw081; lblFPGAkw[82] = lbl_FPGAkw082; lblFPGAkw[83] = lbl_FPGAkw083;
                lblFPGAkw[84] = lbl_FPGAkw084; lblFPGAkw[85] = lbl_FPGAkw085; lblFPGAkw[86] = lbl_FPGAkw086;
                lblFPGAkw[87] = lbl_FPGAkw087;
                //lblFPGAkw[88] = lbl_FPGAkw088; lblFPGAkw[89] = lbl_FPGAkw089;
                //lblFPGAkw[90] = lbl_FPGAkw090; lblFPGAkw[91] = lbl_FPGAkw091; lblFPGAkw[92] = lbl_FPGAkw092;
                //lblFPGAkw[93] = lbl_FPGAkw093; lblFPGAkw[94] = lbl_FPGAkw094; lblFPGAkw[95] = lbl_FPGAkw095;
                lblFPGAkw[96] = lbl_FPGAkw096; lblFPGAkw[97] = lbl_FPGAkw097;
                //lblFPGAkw[98] = lbl_FPGAkw098;
                //lblFPGAkw[99] = lbl_FPGAkw099; lblFPGAkw[100] = lbl_FPGAkw100; lblFPGAkw[101] = lbl_FPGAkw101;
                //lblFPGAkw[102] = lbl_FPGAkw102; lblFPGAkw[103] = lbl_FPGAkw103; lblFPGAkw[104] = lbl_FPGAkw104;
                //lblFPGAkw[105] = lbl_FPGAkw105; lblFPGAkw[106] = lbl_FPGAkw106; lblFPGAkw[107] = lbl_FPGAkw107;
                //lblFPGAkw[108] = lbl_FPGAkw108; lblFPGAkw[109] = lbl_FPGAkw109; lblFPGAkw[110] = lbl_FPGAkw110;
                //lblFPGAkw[111] = lbl_FPGAkw111; lblFPGAkw[112] = lbl_FPGAkw112; lblFPGAkw[113] = lbl_FPGAkw113;
                //lblFPGAkw[114] = lbl_FPGAkw114; lblFPGAkw[115] = lbl_FPGAkw115; lblFPGAkw[116] = lbl_FPGAkw116;
                //lblFPGAkw[117] = lbl_FPGAkw117; lblFPGAkw[118] = lbl_FPGAkw118; lblFPGAkw[119] = lbl_FPGAkw119;
                //lblFPGAkw[120] = lbl_FPGAkw120; lblFPGAkw[121] = lbl_FPGAkw121; lblFPGAkw[122] = lbl_FPGAkw122;
                //lblFPGAkw[123] = lbl_FPGAkw123; lblFPGAkw[124] = lbl_FPGAkw124; lblFPGAkw[125] = lbl_FPGAkw125;
                //lblFPGAkw[126] = lbl_FPGAkw126; lblFPGAkw[127] = lbl_FPGAkw127; lblFPGAkw[128] = lbl_FPGAkw128;
                //lblFPGAkw[200] = lbl_FPGAkw200; lblFPGAkw[201] = lbl_FPGAkw201; lblFPGAkw[202] = lbl_FPGAkw202;
                //lblFPGAkw[203] = lbl_FPGAkw203; lblFPGAkw[204] = lbl_FPGAkw204; lblFPGAkw[205] = lbl_FPGAkw205;
                //lblFPGAkw[206] = lbl_FPGAkw206; lblFPGAkw[207] = lbl_FPGAkw207; lblFPGAkw[208] = lbl_FPGAkw208;
                //lblFPGAkw[209] = lbl_FPGAkw209; lblFPGAkw[210] = lbl_FPGAkw210; lblFPGAkw[211] = lbl_FPGAkw211;
                //lblFPGAkw[212] = lbl_FPGAkw212; lblFPGAkw[213] = lbl_FPGAkw213; lblFPGAkw[214] = lbl_FPGAkw214;
                //lblFPGAkw[215] = lbl_FPGAkw215; lblFPGAkw[216] = lbl_FPGAkw216; lblFPGAkw[217] = lbl_FPGAkw217;
                //lblFPGAkw[218] = lbl_FPGAkw218; lblFPGAkw[219] = lbl_FPGAkw219; lblFPGAkw[220] = lbl_FPGAkw220;
                //lblFPGAkw[221] = lbl_FPGAkw221;            
                //lblFPGAkw[256] = lbl_FPGAkw256; lblFPGAkw[257] = lbl_FPGAkw257;
                //lblFPGAkw[259] = lbl_FPGAkw3584; lblFPGAkw[260] = lbl_FPGAkw3585;
                #endregion

                #region lblFPGAtxt
                lblFPGAtxt[0] = lbl_FPGAtxt000; lblFPGAtxt[1] = lbl_FPGAtxt001; lblFPGAtxt[2] = lbl_FPGAtxt002;
                lblFPGAtxt[3] = lbl_FPGAtxt003; lblFPGAtxt[4] = lbl_FPGAtxt004; lblFPGAtxt[5] = lbl_FPGAtxt005;
                lblFPGAtxt[6] = lbl_FPGAtxt006; lblFPGAtxt[7] = lbl_FPGAtxt007; lblFPGAtxt[8] = lbl_FPGAtxt008;
                lblFPGAtxt[9] = lbl_FPGAtxt009;
                //lblFPGAtxt[10] = lbl_FPGAtxt010; lblFPGAtxt[11] = lbl_FPGAtxt011;
                //lblFPGAtxt[12] = lbl_FPGAtxt012; lblFPGAtxt[13] = lbl_FPGAtxt013; lblFPGAtxt[14] = lbl_FPGAtxt014;
                //lblFPGAtxt[15] = lbl_FPGAtxt015; 
                lblFPGAtxt[16] = lbl_FPGAtxt016; lblFPGAtxt[17] = lbl_FPGAtxt017;
                lblFPGAtxt[18] = lbl_FPGAtxt018; lblFPGAtxt[19] = lbl_FPGAtxt019; lblFPGAtxt[20] = lbl_FPGAtxt020;
                lblFPGAtxt[21] = lbl_FPGAtxt021; lblFPGAtxt[22] = lbl_FPGAtxt022;
                //lblFPGAtxt[23] = lbl_FPGAtxt023;
                //lblFPGAtxt[24] = lbl_FPGAtxt024; lblFPGAtxt[25] = lbl_FPGAtxt025; lblFPGAtxt[26] = lbl_FPGAtxt026;
                //lblFPGAtxt[27] = lbl_FPGAtxt027; lblFPGAtxt[28] = lbl_FPGAtxt028; lblFPGAtxt[29] = lbl_FPGAtxt029;
                //lblFPGAtxt[30] = lbl_FPGAtxt030; lblFPGAtxt[31] = lbl_FPGAtxt031; 
                lblFPGAtxt[32] = lbl_FPGAtxt032;
                lblFPGAtxt[33] = lbl_FPGAtxt033; lblFPGAtxt[34] = lbl_FPGAtxt034; lblFPGAtxt[35] = lbl_FPGAtxt035;
                //lblFPGAtxt[36] = lbl_FPGAtxt036; lblFPGAtxt[37] = lbl_FPGAtxt037; lblFPGAtxt[38] = lbl_FPGAtxt038;
                //lblFPGAtxt[39] = lbl_FPGAtxt039; lblFPGAtxt[40] = lbl_FPGAtxt040; lblFPGAtxt[41] = lbl_FPGAtxt041;
                //lblFPGAtxt[42] = lbl_FPGAtxt042; lblFPGAtxt[43] = lbl_FPGAtxt043; lblFPGAtxt[44] = lbl_FPGAtxt044;
                //lblFPGAtxt[45] = lbl_FPGAtxt045; lblFPGAtxt[46] = lbl_FPGAtxt046; lblFPGAtxt[47] = lbl_FPGAtxt047;
                lblFPGAtxt[48] = lbl_FPGAtxt048; lblFPGAtxt[49] = lbl_FPGAtxt049; lblFPGAtxt[50] = lbl_FPGAtxt050;
                lblFPGAtxt[51] = lbl_FPGAtxt051; lblFPGAtxt[52] = lbl_FPGAtxt052; 
                //lblFPGAtxt[53] = lbl_FPGAtxt053;
                //lblFPGAtxt[54] = lbl_FPGAtxt054; lblFPGAtxt[55] = lbl_FPGAtxt055; lblFPGAtxt[56] = lbl_FPGAtxt056;
                //lblFPGAtxt[57] = lbl_FPGAtxt057; lblFPGAtxt[58] = lbl_FPGAtxt058; lblFPGAtxt[59] = lbl_FPGAtxt059;
                //lblFPGAtxt[60] = lbl_FPGAtxt060; lblFPGAtxt[61] = lbl_FPGAtxt061; lblFPGAtxt[62] = lbl_FPGAtxt062;
                //lblFPGAtxt[63] = lbl_FPGAtxt063; 
                lblFPGAtxt[64] = lbl_FPGAtxt064; lblFPGAtxt[65] = lbl_FPGAtxt065; lblFPGAtxt[66] = lbl_FPGAtxt066;
                lblFPGAtxt[67] = lbl_FPGAtxt067; lblFPGAtxt[68] = lbl_FPGAtxt068;
                //lblFPGAtxt[69] = lbl_FPGAtxt069; lblFPGAtxt[70] = lbl_FPGAtxt070; lblFPGAtxt[71] = lbl_FPGAtxt071;
                //lblFPGAtxt[72] = lbl_FPGAtxt072; lblFPGAtxt[73] = lbl_FPGAtxt073; lblFPGAtxt[74] = lbl_FPGAtxt074;
                //lblFPGAtxt[75] = lbl_FPGAtxt075; lblFPGAtxt[76] = lbl_FPGAtxt076; lblFPGAtxt[77] = lbl_FPGAtxt077;
                //lblFPGAtxt[78] = lbl_FPGAtxt078; lblFPGAtxt[79] = lbl_FPGAtxt079;
                lblFPGAtxt[80] = lbl_FPGAtxt080;
                lblFPGAtxt[81] = lbl_FPGAtxt081; lblFPGAtxt[82] = lbl_FPGAtxt082; lblFPGAtxt[83] = lbl_FPGAtxt083;
                lblFPGAtxt[84] = lbl_FPGAtxt084; lblFPGAtxt[85] = lbl_FPGAtxt085; lblFPGAtxt[86] = lbl_FPGAtxt086;
                lblFPGAtxt[87] = lbl_FPGAtxt087;
                //lblFPGAtxt[88] = lbl_FPGAtxt088; lblFPGAtxt[89] = lbl_FPGAtxt089;
                //lblFPGAtxt[90] = lbl_FPGAtxt090; lblFPGAtxt[91] = lbl_FPGAtxt091; lblFPGAtxt[92] = lbl_FPGAtxt092;
                //lblFPGAtxt[93] = lbl_FPGAtxt093; lblFPGAtxt[94] = lbl_FPGAtxt094; lblFPGAtxt[95] = lbl_FPGAtxt095;
                lblFPGAtxt[96] = lbl_FPGAtxt096; lblFPGAtxt[97] = lbl_FPGAtxt097;
                //lblFPGAtxt[98] = lbl_FPGAtxt098;
                //lblFPGAtxt[99] = lbl_FPGAtxt099; lblFPGAtxt[100] = lbl_FPGAtxt100; lblFPGAtxt[101] = lbl_FPGAtxt101;
                //lblFPGAtxt[102] = lbl_FPGAtxt102; lblFPGAtxt[103] = lbl_FPGAtxt103; lblFPGAtxt[104] = lbl_FPGAtxt104;
                //lblFPGAtxt[105] = lbl_FPGAtxt105; lblFPGAtxt[106] = lbl_FPGAtxt106; lblFPGAtxt[107] = lbl_FPGAtxt107;
                //lblFPGAtxt[108] = lbl_FPGAtxt108; lblFPGAtxt[109] = lbl_FPGAtxt109; lblFPGAtxt[110] = lbl_FPGAtxt110;
                //lblFPGAtxt[111] = lbl_FPGAtxt111; lblFPGAtxt[112] = lbl_FPGAtxt112; lblFPGAtxt[113] = lbl_FPGAtxt113;
                //lblFPGAtxt[114] = lbl_FPGAtxt114; lblFPGAtxt[115] = lbl_FPGAtxt115; lblFPGAtxt[116] = lbl_FPGAtxt116;
                //lblFPGAtxt[117] = lbl_FPGAtxt117; lblFPGAtxt[118] = lbl_FPGAtxt118; lblFPGAtxt[119] = lbl_FPGAtxt119;
                //lblFPGAtxt[120] = lbl_FPGAtxt120; lblFPGAtxt[121] = lbl_FPGAtxt121; lblFPGAtxt[122] = lbl_FPGAtxt122;
                //lblFPGAtxt[123] = lbl_FPGAtxt123; lblFPGAtxt[124] = lbl_FPGAtxt124; lblFPGAtxt[125] = lbl_FPGAtxt125;
                //lblFPGAtxt[126] = lbl_FPGAtxt126; lblFPGAtxt[127] = lbl_FPGAtxt127; lblFPGAtxt[128] = lbl_FPGAtxt128;
                //lblFPGAtxt[200] = lbl_FPGAtxt200; lblFPGAtxt[201] = lbl_FPGAtxt201; lblFPGAtxt[202] = lbl_FPGAtxt202;
                //lblFPGAtxt[203] = lbl_FPGAtxt203; lblFPGAtxt[204] = lbl_FPGAtxt204; lblFPGAtxt[205] = lbl_FPGAtxt205;
                //lblFPGAtxt[206] = lbl_FPGAtxt206; lblFPGAtxt[207] = lbl_FPGAtxt207; lblFPGAtxt[208] = lbl_FPGAtxt208;
                //lblFPGAtxt[209] = lbl_FPGAtxt209; lblFPGAtxt[210] = lbl_FPGAtxt210; lblFPGAtxt[211] = lbl_FPGAtxt211;
                //lblFPGAtxt[212] = lbl_FPGAtxt212; lblFPGAtxt[213] = lbl_FPGAtxt213; lblFPGAtxt[214] = lbl_FPGAtxt214;
                //lblFPGAtxt[215] = lbl_FPGAtxt215; lblFPGAtxt[216] = lbl_FPGAtxt216; lblFPGAtxt[217] = lbl_FPGAtxt217;
                //lblFPGAtxt[218] = lbl_FPGAtxt218; lblFPGAtxt[219] = lbl_FPGAtxt219; lblFPGAtxt[220] = lbl_FPGAtxt220;
                //lblFPGAtxt[221] = lbl_FPGAtxt221;
                //lblFPGAtxt[256] = lbl_FPGAtxt256; lblFPGAtxt[257] = lbl_FPGAtxt257;
                //lblFPGAtxt[259] = lbl_FPGAtxt3584; lblFPGAtxt[260] = lbl_FPGAtxt3585;
                #endregion

                mvars.toolTip1.SetToolTip(lblFPGAkw[0], "DIP1 ~ DIP8");

                mvars.FPGA_GRAY_R = 0x30;
                mvars.FPGA_GRAY_G = 0x31;
                mvars.FPGA_GRAY_B = 0x32;
                //mvars.FPGA_X_START = 108;
                //mvars.FPGA_X_END = 109;
                //mvars.FPGA_Y_START = 110;
                //mvars.FPGA_Y_END = 111;
                trackBar1.Tag = mvars.FPGA_GRAY_R;
                trackBar2.Tag = mvars.FPGA_GRAY_G;
                trackBar3.Tag = mvars.FPGA_GRAY_B;

            }



            for (int i = 0; i < lblns; i++)
            {
                if (lblFPGAtxt[i] != null && FPGAreg[i, svFPGAregNo].Length > 5)
                {
                    lblFPGAkw[i].Text = FPGAreg[i, svFPGAregNo].Split(',')[0]; lblFPGAkw[i].Visible = true; lblFPGAkw[i].Tag = i.ToString();
                    lblFPGAkw[i].MouseDown += lblkw_MouseDown;
                    lblFPGAtxt[i].Text = FPGAreg[i, svFPGAregNo].Split(',')[1]; lblFPGAtxt[i].Visible = true; lblFPGAtxt[i].Tag = i.ToString();
                    lblFPGAtxt[i].MouseDown += lbltxt_MouseDown;
                    FPGAtxtDef[i] = lblFPGAtxt[i].Text;
                    if (lblFPGAkw[i].Text.IndexOf("_Rd", 0) > -1 || lblFPGAtxt[i].Text == "") { lblFPGAtxt[i].BackColor = Control.DefaultBackColor; }
                }
            }
            Array.Copy(FPGAtxtDef, FPGAtxt, lblns);
        }
        private void markreset(int svtotalcounts, bool svdelfb, bool selfrun)
        {
            //mvars.lstget.Items.Clear();
            mvars.t1 = DateTime.Now;
            mvars.strReceive = "";
            mvars.lCounts = svtotalcounts;
            mvars.lCount = 0;
            Array.Resize(ref mvars.lCmd, svtotalcounts); Array.Clear(mvars.lCmd, 0, mvars.lCmd.Length);
            Array.Resize(ref mvars.lGet, svtotalcounts); Array.Clear(mvars.lGet, 0, mvars.lGet.Length);
            mvars.flgDelFB = svdelfb;
            mvars.flgSelf = selfrun;
            Form1.tslblStatus.Text = "";
            mvars.flgSend = false;
            mvars.flgReceived = false;
        }


        private void btn_FPGAdefault_Click(object sender, EventArgs e)
        {
            for (int Svi = 0; Svi < lblns; Svi++)
            {
                if (lblFPGAtxt[Svi] != null && lblFPGAtxt[Svi].Visible == true)
                {
                    lblFPGAtxt[Svi].Text = FPGAtxtDef[Svi];
                    lblFPGAtxt[Svi].BackColor = Color.Cyan;
                }
            }
            cmb_FPGAtxt.Visible = false;
            txt_FPGAtxt.Visible = false;
            gboxdip.Visible = false;
            gboxalctrl.Visible = false;
        }

        private void btn_FPGAR_Click(object sender, EventArgs e)
        {
            if (mvars.demoMode == false && mp.Sp1open(Form1.tslblCOM.Text).Substring(0, 5) == "false")
            {
                if (mvars.deviceID == "0310") { MessageBox.Show("Please select single XB", mvars.strUInameMe + "_v" + mvars.UImajor); return; }
                if (mvars.deviceID == "0300") { MessageBox.Show("Please select single XB", mvars.strUInameMe + "_v" + mvars.UImajor); return; }

                Form1.tslblHW.Text = "232"; Form1.tslblHW.BackColor = Control.DefaultBackColor; Form1.tslblHW.ForeColor = Color.Black;
                Form1.tslblCOM.ForeColor = Color.Red;
                MessageBox.Show("COM error" + "\r\n" + "\r\n" + "Please check", mvars.strUInameMe + "_v" + mvars.UImajor); return;
            }

            if (cmb_FPGAtxt.Visible == true || txt_FPGAtxt.Visible == true)
            {
                MessageBox.Show("Please confirm selected", mvars.strUInameMe + "_v" + mvars.UImajor);
                if (cmb_FPGAtxt.Visible == true) { cmb_FPGAtxt.Focus(); }
                else { txt_FPGAtxt.Focus(); }
                return;
            }

            gboxdip.Visible = false;
            gboxalctrl.Visible = false;
            this.Enabled = false;
            markreset(lblns, false, true);
            int Svi;

            if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06")
                svfpgareg = new string[2, lblns];
            else
                svfpgareg = new string[1, lblns];

            if (gboxFPGAstatus.Visible == false)
            {
                for (Svi = 0; Svi < lblns; Svi++)
                {
                    if (lblFPGAkw[Svi] != null && lblFPGAkw[Svi].Visible == true && lblFPGAkw[Svi].BackColor != Control.DefaultBackColor)
                    {
                        lblFPGAtxt[Svi].Text = "";
                        Form1.pvindex = Svi;

                        if (mvars.deviceID.Substring(0, 2) == "05" && Convert.ToInt16(lblFPGAkw[Form1.pvindex].Name.Substring("lbl_FPGAkw".Length, lblFPGAkw[Form1.pvindex].Name.Length - "lbl_FPGAkw".Length)) != Form1.pvindex)
                        {
                            if (Form1.pvindex == 259) Form1.pvindex = 3584;
                            else if (Form1.pvindex == 260) Form1.pvindex = 3585;
                        }

                        string Svs = "FPGA_SPI_R" + Form1.pvindex.ToString("000");
                        mvars.lblCmd = "FPGA_SPI_R";

                        if (mvars.demoMode)
                        {
                            mvars.lCmd[mvars.lCount] = mvars.lblCmd;
                            mvars.lGet[mvars.lCount] = "DONE,demo";
                            mvars.lCount++;
                        }
                        else
                        {
                            mp.mhFPGASPIREAD();
                            if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1)
                            {
                                if (mvars.deviceID.Substring(0, 2) == "05" && Form1.pvindex > 258)
                                {
                                    if (Form1.pvindex == 3584) Form1.pvindex = 259;
                                    else if (Form1.pvindex == 3585) Form1.pvindex = 260;
                                }
                                if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1)
                                {
                                    FPGAtxt[Svi] = "";
                                }
                                else
                                {
                                    if (mvars.FPGAsel == 1) FPGAtxt[Svi] = mvars.lGet[mvars.lCount - 1].Split(',')[mvars.lGet[mvars.lCount - 1].Split(',').Length - 1].Split('-')[mvars.FPGAsel];
                                    else FPGAtxt[Svi] = mvars.lGet[mvars.lCount - 1].Split(',')[mvars.lGet[mvars.lCount - 1].Split(',').Length - 1].Split('-')[0];
                                }

                                lblFPGAtxt[Svi].Text = FPGAtxt[Svi];
                                svfpgareg[0, Svi] = FPGAtxt[Svi];
                                if (svfpgareg.GetLength(0) == 2)
                                    svfpgareg[1, Svi] = mvars.lGet[mvars.lCount - 1].Split(',')[mvars.lGet[mvars.lCount - 1].Split(',').Length - 1].Split('-')[1];
                            }
                        }
                        //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                    }
                }
            }
            else if (gboxFPGAstatus.Visible == true)
            {
                uc_FPGAreg.lblststxt6041.Text = "";
                uc_FPGAreg.lblststxt6021.Text = "";
                uc_FPGAreg.lblststxt6040.Text = "";
                uc_FPGAreg.lblststxt6020.Text = "";
                uc_FPGAreg.lblststxt6012.Text = "";
                uc_FPGAreg.lblststxt6011.Text = "";
                uc_FPGAreg.lblststxt6010.Text = "";
                uc_FPGAreg.lblststxt6000.Text = "";
                uc_FPGAreg.lblststxt6042.Text = "";
                uc_FPGAreg.lblststxt6043.Text = "";
                uc_FPGAreg.lblststxt6044.Text = "";
                uc_FPGAreg.lblststxt6046.Text = "";
                uc_FPGAreg.lblststxt6045.Text = "";
                uc_FPGAreg.lblststxt6047.Text = "";
                uc_FPGAreg.lblststxt6048.Text = "";
                uc_FPGAreg.lblststxt6049.Text = "";
                uc_FPGAreg.lblststxt604a.Text = "";
                uc_FPGAreg.lblststxt604b.Text = "";
                uc_FPGAreg.lblststxt6060.Text = "";
                uc_FPGAreg.lblststxt6061.Text = "";
                uc_FPGAreg.lblststxt6062.Text = "";
                for (Form1.pvindex = 0x6000; Form1.pvindex <= 0x6000; Form1.pvindex++)
                {
                    string Svs = "FPGA_SPI_R" + mp.DecToHex(Form1.pvindex, 4) + "h";
                    mvars.lblCmd = "FPGA_SPI_R";
                    if (mvars.demoMode) { mvars.lGet[mvars.lCount] = "DONE,demo"; mvars.lCmd[mvars.lCount] = mvars.lblCmd; mvars.lCount++; }
                    else { mp.mhFPGASPIREAD(); }
                    //if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1) { mvars.lstget.Items.Add(Svs + ",ERROR"); }
                    //else { mvars.lstget.Items.Add(Svs + ",DONE"); }
                    //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                }
                for (Form1.pvindex = 0x6010; Form1.pvindex <= 0x6012; Form1.pvindex++)
                {
                    string Svs = "FPGA_SPI_R" + mp.DecToHex(Form1.pvindex, 4) + "h";
                    mvars.lblCmd = "FPGA_SPI_R";
                    if (mvars.demoMode) { mvars.lGet[mvars.lCount] = "DONE,demo"; mvars.lCmd[mvars.lCount] = mvars.lblCmd; mvars.lCount++; }
                    else { mp.mhFPGASPIREAD(); }
                    //if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1) { mvars.lstget.Items.Add(Svs + ",ERROR"); }
                    //else { mvars.lstget.Items.Add(Svs + ",DONE"); }
                    //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                }
                for (Form1.pvindex = 0x6020; Form1.pvindex <= 0x6021; Form1.pvindex++)
                {
                    string Svs = "FPGA_SPI_R" + mp.DecToHex(Form1.pvindex, 4) + "h";
                    mvars.lblCmd = "FPGA_SPI_R";
                    if (mvars.demoMode) { mvars.lGet[mvars.lCount] = "DONE,demo"; mvars.lCmd[mvars.lCount] = mvars.lblCmd; mvars.lCount++; }
                    else { mp.mhFPGASPIREAD(); }
                    //if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1) { mvars.lstget.Items.Add(Svs + ",ERROR"); }
                    //else { mvars.lstget.Items.Add(Svs + ",DONE"); }
                    //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                }
                for (Form1.pvindex = 0x6040; Form1.pvindex <= 0x604b; Form1.pvindex++)
                {
                    string Svs = "FPGA_SPI_R" + mp.DecToHex(Form1.pvindex, 4) + "h";
                    mvars.lblCmd = "FPGA_SPI_R";
                    if (mvars.demoMode) { mvars.lGet[mvars.lCount] = "DONE,demo"; mvars.lCmd[mvars.lCount] = mvars.lblCmd; mvars.lCount++; }
                    else { mp.mhFPGASPIREAD(); }
                    //if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1) { mvars.lstget.Items.Add(Svs + ",ERROR"); }
                    //else { mvars.lstget.Items.Add(Svs + ",DONE"); }
                    //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                }
                for (Form1.pvindex = 0x6060; Form1.pvindex <= 0x6062; Form1.pvindex++)
                {
                    string Svs = "FPGA_SPI_R" + mp.DecToHex(Form1.pvindex, 4) + "h";
                    mvars.lblCmd = "FPGA_SPI_R";
                    if (mvars.demoMode) { mvars.lGet[mvars.lCount] = "DONE,demo"; mvars.lCmd[mvars.lCount] = mvars.lblCmd; mvars.lCount++; }
                    else { mp.mhFPGASPIREAD(); }
                    //if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1) { mvars.lstget.Items.Add(Svs + ",ERROR"); }
                    //else { mvars.lstget.Items.Add(Svs + ",DONE"); }
                    //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                }
            }
            if (mvars.demoMode == false) { mp.CommClose(); }
            this.Enabled = true;
        }
        private void btn_FPGAW_Click(object sender, EventArgs e)
        {
            if (mvars.demoMode == false)
            {
                if (mp.Sp1open(Form1.tslblCOM.Text).Substring(0, 5) == "false") { MessageBox.Show("COM error" + "\r\n" + "\r\n" + "Please check", mvars.strUInameMe + "_v" + mvars.UImajor); return; }
                Form1.tslblHW.Text = "232"; Form1.tslblHW.BackColor = Color.Blue; Form1.tslblHW.ForeColor = Color.White;
            }
            else { MessageBox.Show("demo mode"); }

            if (cmb_FPGAtxt.Visible == true || txt_FPGAtxt.Visible == true)
            {
                MessageBox.Show("Please confirm selected", mvars.strUInameMe + "_v" + mvars.UImajor);
                if (cmb_FPGAtxt.Visible == true) { cmb_FPGAtxt.Focus(); }
                else { txt_FPGAtxt.Focus(); }
                return;
            }

            //DateTime t1;

            int Svi;
            this.Enabled = false;
            markreset(lblns, false, true);


            for (Svi = 0; Svi < lblns; Svi++)
            {
                if (lblFPGAtxt[Svi] != null && lblFPGAtxt[Svi].Visible == true && lblFPGAtxt[Svi].BackColor == Color.Cyan)
                {
                    Form1.pvindex = Svi;
                    string Svs = "FPGA_SPI_W" + Form1.pvindex.ToString("000");
                    mvars.lblCmd = "FPGA_SPI_W";
                    int svm = mp.BinToDec(lblFPGAtxt[Svi].Text);
                    if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06")
                    {
                        if (Svi == mvars.FPGA_DIP_SW) { mp.mhFPGASPIWRITE(mvars.FPGAsel, mp.BinToDec(lblFPGAtxt[Svi].Text)); }
                        else { mp.mhFPGASPIWRITE(mvars.FPGAsel, Convert.ToInt32(lblFPGAtxt[Svi].Text)); }
                    }
                    else mp.mhFPGASPIWRITE(Convert.ToInt32(lblFPGAtxt[Svi].Text));
                    //if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) > -1) { mvars.lstget.Items.Add(Svs + ",ERROR"); }
                    //else { mvars.lstget.Items.Add(Svs + ",DONE"); lblFPGAtxt[Svi].BackColor = Color.White; FPGAtxt[Svi] = lblFPGAtxt[Svi].Text; }
                    //mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
                }
            }
            if (mvars.deviceID.Substring(0, 2) == "02" ||
                mvars.deviceID.Substring(0, 2) == "04" ||
                mvars.deviceID.Substring(0, 2) == "06")     // for LK FPGA code
            {
                if (Form1.pvindex == mvars.FPGA_GRAY_R || 
                    Form1.pvindex == mvars.FPGA_GRAY_G || 
                    Form1.pvindex == mvars.FPGA_GRAY_B)
                {
                    //Form1.pvindex = 255;
                    //mvars.lblCmd = "FPGA_SPI_W255";
                    //mp.mhFPGASPIWRITE(mvars.FPGAsel, 0);
                    //mvars.lblCmd = "FPGA_SPI_W255";
                    //mp.mhFPGASPIWRITE(mvars.FPGAsel, 1);
                    //mvars.lblCmd = "FPGA_SPI_W255";
                    //mp.mhFPGASPIWRITE(mvars.FPGAsel, 0);

                    //int[] svreg = new int[] { mvars.FPGA_GRAY_R, mvars.FPGA_GRAY_G, mvars.FPGA_GRAY_B };
                    //int[] svdata = new int[] { int.Parse(lblFPGAtxt[mvars.FPGA_GRAY_R].Text), 
                    //                           int.Parse(lblFPGAtxt[mvars.FPGA_GRAY_G].Text), 
                    //                           int.Parse(lblFPGAtxt[mvars.FPGA_GRAY_B].Text) };
                    //mvars.lblCmd = "FPGA_SPI_W";
                    //mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);

                }
                else
                {
                    if (Form1.pvindex == mvars.FPGA_X_START ||
                    Form1.pvindex == mvars.FPGA_X_END ||
                    Form1.pvindex == mvars.FPGA_Y_START ||
                    Form1.pvindex == mvars.FPGA_Y_END) goto ex;

                    Form1.pvindex = 255;
                    mvars.lblCmd = "FPGA_SPI_W255";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, 0);
                    mvars.lblCmd = "FPGA_SPI_W255";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, 1);
                    mvars.lblCmd = "FPGA_SPI_W255";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, 0);

                    //int[] svreg = new int[] { mvars.FPGA_UD_REG, mvars.FPGA_X_END, mvars.FPGA_Y_START };
                    //int[] svdata = new int[] { 0, 1, 0 };
                    //mvars.lblCmd = "FPGA_SPI_W";
                    //mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                }
            }
            ex:
            if (mvars.demoMode == false) { mp.CommClose(); }
            this.Enabled = true;
        }








        private void txt_FPGAtxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down || e.KeyCode == Keys.Escape)
            {
                txt_FPGAtxt.Visible = false;
            }
            else if (e.KeyCode == Keys.Return)
            {
                if (mvars.deviceID == "0300" || svFPGAregNo == 1)
                {
                    if ((mp.IsNumeric(Convert.ToInt32(txt_FPGAtxt.Text)) == true && txt_FPGAtxt.Text != "0") || txt_FPGAtxt.Text.IndexOf(".") == -1)
                    {
                        if (FPGAtxt[Form1.pvindex] == txt_FPGAtxt.Text)
                        {
                            lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                            lblFPGAkw[Form1.pvindex].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[Form1.pvindex] = false;
                        }
                        else
                        {
                            lblFPGAtxt[Form1.pvindex].Text = txt_FPGAtxt.Text;
                            lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                            lblFPGAkw[Form1.pvindex].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[Form1.pvindex] = true;
                        }
                        txt_FPGAtxt.Visible = false;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        txt_FPGAtxt.Visible = false;
                    }
                }
                else
                {
                    if ((mp.IsNumeric(Convert.ToInt32(txt_FPGAtxt.Text)) == true && txt_FPGAtxt.Text != "0") || txt_FPGAtxt.Text.IndexOf(".") == -1)
                    {
                        if (FPGAtxt[Form1.pvindex] == txt_FPGAtxt.Text)
                        {
                            lblFPGAtxt[Form1.pvindex].Text = txt_FPGAtxt.Text;
                            lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                            lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                        }
                        else
                        {
                            lblFPGAtxt[Form1.pvindex].Text = txt_FPGAtxt.Text;
                            lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                            lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                        }
                        txt_FPGAtxt.Visible = false;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        txt_FPGAtxt.Visible = false;
                    }
                }
            }
            btn_FPGAW.Enabled = true;
            btn_FPGAR.Enabled = true;
        }

        private void cmb_FPGAtxt_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Svi = 0;
            if (mvars.deviceID == "0200")
            {
                if (Form1.pvindex == mvars.FPGA_SI_SEL || Form1.pvindex == mvars.FPGA_AG_MOD || Form1.pvindex == mvars.FPGA_OM_RW)
                {
                    if (cmb_FPGAtxt.Text == " HDMI" || cmb_FPGAtxt.Text == " Enable" || cmb_FPGAtxt.Text == " Read" || cmb_FPGAtxt.Text == " ON") { Svi = 1; }
                    else if (cmb_FPGAtxt.Text == " Default" || cmb_FPGAtxt.Text == " PG" || cmb_FPGAtxt.Text == " Disable" || cmb_FPGAtxt.Text == " Write" || cmb_FPGAtxt.Text == " OFF") { Svi = 0; }
                    else if (cmb_FPGAtxt.Text == " F LAN") { Svi = 2; }
                    else if (cmb_FPGAtxt.Text == " F PG") { Svi = 3; }
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == Svi)
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = Svi.ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
                else if (Form1.pvindex == mvars.FPGA_XB_HPD)
                {
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == mp.BinToDec(cmb_FPGAtxt.Text.Trim()))
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = mp.BinToDec(cmb_FPGAtxt.Text.Trim()).ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
            }
            else if (mvars.deviceID == "0300" || svFPGAregNo == 1)
            {
                if (Form1.pvindex == mvars.FPGA_OM_ADDR)
                {
                    Svi = cmb_FPGAtxt.SelectedIndex;
                }
                else
                {
                    if (cmb_FPGAtxt.Text.Substring(0, 3) == " On" || cmb_FPGAtxt.Text.Substring(0, 6) == " MCU2F") { Svi = 0; }
                    else if (cmb_FPGAtxt.Text.Substring(0, 3) == " Of" || cmb_FPGAtxt.Text.Substring(0, 6) == " FPGA2") { Svi = 1; }
                }

                if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == Svi)
                {
                    lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                    lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                    //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                }
                else
                {
                    lblFPGAtxt[Form1.pvindex].Text = Svi.ToString();
                    lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                    //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                }
            }
            else if (mvars.deviceID == "0400")
            {
                if (Form1.pvindex == mvars.FPGA_SI_SEL || Form1.pvindex == mvars.FPGA_AG_MOD || Form1.pvindex == mvars.FPGA_OM_RW)
                {
                    if (cmb_FPGAtxt.Text == " HDMI" || cmb_FPGAtxt.Text == " Enable" || cmb_FPGAtxt.Text == " Read" || cmb_FPGAtxt.Text == " ON") { Svi = 1; }
                    else if (cmb_FPGAtxt.Text == " Default" || cmb_FPGAtxt.Text == " PG" || cmb_FPGAtxt.Text == " Disable" || cmb_FPGAtxt.Text == " Write" || cmb_FPGAtxt.Text == " OFF") { Svi = 0; }
                    else if (cmb_FPGAtxt.Text == " F LAN") { Svi = 2; }
                    else if (cmb_FPGAtxt.Text == " F PG") { Svi = 3; }
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == Svi)
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = Svi.ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
                else if (Form1.pvindex == mvars.FPGA_XB_HPD)
                {
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == mp.BinToDec(cmb_FPGAtxt.Text.Trim()))
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = mp.BinToDec(cmb_FPGAtxt.Text.Trim()).ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
            }
            else if (mvars.deviceID.Substring(0, 2) == "05")
            {
                if (Form1.pvindex == mvars.FPGA_BK_SEL)
                {
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == mp.BinToDec(cmb_FPGAtxt.Text.Trim()))
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = mp.BinToDec(cmb_FPGAtxt.Text.Trim()).ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
                else if (Form1.pvindex == mvars.FPGA_DMR)
                {
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == mp.BinToDec(cmb_FPGAtxt.Text.Trim()))
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = mp.BinToDec(cmb_FPGAtxt.Text.Trim()).ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
                else if (Form1.pvindex == mvars.FPGA_AL_CTRL)
                {
                    if (cmb_FPGAtxt.Text.Trim().ToUpper() == "ALL DISABLE" || cmb_FPGAtxt.Text.Trim() == "全部關閉" || cmb_FPGAtxt.Text.Trim() == "全部关闭") lblFPGAtxt[Form1.pvindex].Text = "63";
                    else lblFPGAtxt[Form1.pvindex].Text = cmb_FPGAtxt.SelectedIndex.ToString();
                    lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                    //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                }
                else if (Form1.pvindex == mvars.FPGA_OM_RD)
                {
                    lblFPGAtxt[Form1.pvindex].Text = cmb_FPGAtxt.SelectedIndex.ToString();
                    lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan;
                    Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                }
            }
            else if (mvars.deviceID.Substring(0, 2) == "06")
            {
                if (Form1.pvindex == mvars.FPGA_SI_SEL || Form1.pvindex == mvars.FPGA_AG_MOD || Form1.pvindex == mvars.FPGA_OM_RW)
                {
                    if (cmb_FPGAtxt.Text == " DIP PC" || cmb_FPGAtxt.Text == " PG" || cmb_FPGAtxt.Text == " Disable" || cmb_FPGAtxt.Text == " Write" || cmb_FPGAtxt.Text == " OFF") { Svi = 0; }
                    else if (cmb_FPGAtxt.Text == " DIP PG" || cmb_FPGAtxt.Text == " Enable" || cmb_FPGAtxt.Text == " Read" || cmb_FPGAtxt.Text == " ON") { Svi = 1; }
                    else if (cmb_FPGAtxt.Text == " UI PC") { Svi = 2; }
                    else if (cmb_FPGAtxt.Text == " UI PG") { Svi = 3; }
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == Svi)
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = Svi.ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
                else if (Form1.pvindex == mvars.FPGA_XB_HPD)
                {
                    if (Convert.ToInt32(FPGAtxt[Form1.pvindex]) == mp.BinToDec(cmb_FPGAtxt.Text.Trim()))
                    {
                        lblFPGAtxt[Form1.pvindex].Text = FPGAtxt[Form1.pvindex];
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Black;
                    }
                    else
                    {
                        lblFPGAtxt[Form1.pvindex].Text = mp.BinToDec(cmb_FPGAtxt.Text.Trim()).ToString();
                        lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                        //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                    }
                }
            }
            else if (mvars.deviceID.Substring(0, 2) == "10")
            {
                if (Form1.pvindex == mvars.FPGA_AL_CTRL)
                {
                    if (cmb_FPGAtxt.Text.Trim().ToUpper() == "ALL DISABLE" || cmb_FPGAtxt.Text.Trim() == "全部關閉" || cmb_FPGAtxt.Text.Trim() == "全部关闭") lblFPGAtxt[Form1.pvindex].Text = "63";
                    else lblFPGAtxt[Form1.pvindex].Text = cmb_FPGAtxt.SelectedIndex.ToString();
                    lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true;
                    //lblFPGAkw[Form1.pvindex].ForeColor = Color.Cyan;
                }

            }

            cmb_FPGAtxt.Visible = false;
            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
        }

        private void lblkw_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left && Form1.pvindex == 0)
            {
                if (lblFPGAkw[0].BackColor == Color.Cyan)
                {
                    for (int Svi = 0; Svi < lblns; Svi++)
                    {
                        if (lblFPGAkw[Svi] != null && lblFPGAkw[Svi].Visible == true) { lblFPGAkw[Svi].BackColor = Control.DefaultBackColor; lblFPGAkw[Svi].ForeColor = Color.Black; }
                    }
                }
                else
                {
                    for (int Svi = 0; Svi < lblns; Svi++)
                    {
                        if (lblFPGAkw[Svi] != null && lblFPGAkw[Svi].Visible == true) { lblFPGAkw[Svi].BackColor = Color.Cyan; lblFPGAkw[Svi].ForeColor = Color.Black; }
                    }
                }
            }
        }

        private void lblkw_MouseDown(object sender, MouseEventArgs e)
        {
            Label lblClick = (Label)sender;   //將sender轉型為按鈕物件btnClick
            Form1.pvindex = Convert.ToInt32(lblClick.Tag);
            if (e.Button == MouseButtons.Right)
            {
                if (lblFPGAkw[Form1.pvindex].BackColor == Control.DefaultBackColor)
                {
                    lblFPGAkw[Form1.pvindex].BackColor = Color.Cyan;
                    if (lblFPGAkw[Form1.pvindex].ForeColor == Color.Cyan) { lblFPGAkw[Form1.pvindex].ForeColor = Color.Black; }
                }
                else
                {
                    lblFPGAkw[Form1.pvindex].BackColor = Control.DefaultBackColor;
                    if (lblFPGAkw[Form1.pvindex].ForeColor == Color.Cyan) { lblFPGAkw[Form1.pvindex].ForeColor = Color.Black; }
                }
            }
            else if (e.Button == MouseButtons.Left)
            {
                gbox_alctrl.Visible = false;
                gbox_dip.Visible = false;
                gbox_autorun.Visible = false;
                if (cmb_FPGAtxt.Visible == true) { cmb_FPGAtxt.Visible = false; btn_FPGAR.Enabled = true; }
                else if (txt_FPGAtxt.Visible == true) { txt_FPGAtxt.Visible = false; btn_FPGAR.Enabled = true; }
            }
            btn_FPGAW.Enabled = true;
            btn_FPGAW.Enabled = true;
        }

        private void lbltxt_MouseDown(object sender, MouseEventArgs e)
        {
            Label lblClick = (Label)sender;   //將sender轉型為按鈕物件btnClick
            Form1.pvindex = Convert.ToInt32(lblClick.Tag);
            if (gboxdip.Visible == true) gboxdip.Visible = false;
            if (e.Button == MouseButtons.Left)
            {
                cmb_FPGAtxt.Visible = false;
                //txt_FPGAtxt.Visible = false;

                gboxdip.Visible = false;
                gboxalctrl.Visible = false;
                gbox_autorun.Visible = false;

                if (lblFPGAkw[Form1.pvindex].Text.Length > 5 && lblFPGAtxt[Form1.pvindex].BackColor != Control.DefaultBackColor)
                {
                    if (mvars.deviceID.Substring(0, 2) == "02" || mvars.deviceID.Substring(0, 2) == "04")
                    {
                        #region C12A/B
                        if (Form1.pvindex == mvars.FPGA_CODE_VER)
                        {
                            cmb_FPGAtxt.Visible = false;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            txt_FPGAtxt.Visible = false;
                        }
                        else if (Form1.pvindex == mvars.FPGA_OM_Rdata || Form1.pvindex == mvars.FPGA_CB_Rdsts || Form1.pvindex == mvars.FPGA_U0_RdCnt || Form1.pvindex == mvars.FPGA_U1_RdCnt || Form1.pvindex == mvars.FPGA_U2_RdCnt || Form1.pvindex == mvars.FPGA_U3_RdCnt || Form1.pvindex == mvars.FPGA_Ucksm_NG)
                        {

                        }
                        else if (Form1.pvindex == mvars.FPGA_SI_SEL || Form1.pvindex == mvars.FPGA_AG_MOD || Form1.pvindex == mvars.FPGA_OM_RW || Form1.pvindex == mvars.FPGA_XB_HPD)
                        {
                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);

                            int Svi = Convert.ToInt32(lblClick.Text);
                            cmb_FPGAtxt.Items.Clear();
                            if (Form1.pvindex == mvars.FPGA_SI_SEL)
                            {
                                cmb_FPGAtxt.Items.Add(" Default");
                                cmb_FPGAtxt.Items.Add(" F LAN");
                                cmb_FPGAtxt.Items.Add(" F PG");

                            }
                            else if (Form1.pvindex == mvars.FPGA_XB_HPD)
                            {
                                cmb_FPGAtxt.Items.Add(" 0000");
                                cmb_FPGAtxt.Items.Add(" 0001");
                                cmb_FPGAtxt.Items.Add(" 0010");
                                cmb_FPGAtxt.Items.Add(" 0011");
                                cmb_FPGAtxt.Items.Add(" 0100");
                                cmb_FPGAtxt.Items.Add(" 0101");
                                cmb_FPGAtxt.Items.Add(" 0110");
                                cmb_FPGAtxt.Items.Add(" 0111");
                                cmb_FPGAtxt.Items.Add(" 1000");
                                cmb_FPGAtxt.Items.Add(" 1001");
                                cmb_FPGAtxt.Items.Add(" 1010");
                                cmb_FPGAtxt.Items.Add(" 1011");
                                cmb_FPGAtxt.Items.Add(" 1100");
                                cmb_FPGAtxt.Items.Add(" 1101");
                                cmb_FPGAtxt.Items.Add(" 1110");
                                cmb_FPGAtxt.Items.Add(" 1111");
                            }
                            else if (Form1.pvindex == mvars.FPGA_AG_MOD)
                            {
                                cmb_FPGAtxt.Items.Add(" Disable");
                                cmb_FPGAtxt.Items.Add(" Enable");
                            }
                            else if (Form1.pvindex == mvars.FPGA_OM_RW)
                            {
                                cmb_FPGAtxt.Items.Add(" Write");
                                cmb_FPGAtxt.Items.Add(" Read");
                            }
                            if (Form1.pvindex == mvars.FPGA_SI_SEL)
                            {
                                if (Svi == 0) { cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Svi].ToString(); }
                                else { cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Svi - 1].ToString(); }
                            }
                            else { cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Svi].ToString(); }

                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Tag = true;     //設置標記             
                            cmb_FPGAtxt.SelectAll();    //注意1
                            cmb_FPGAtxt.Focus();
                        }
                        else
                        {
                            txt_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            txt_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            txt_FPGAtxt.Text = lblFPGAtxt[Form1.pvindex].Text;
                            txt_FPGAtxt.Visible = true;
                            txt_FPGAtxt.Select(txt_FPGAtxt.Text.Length, 0); txt_FPGAtxt.ScrollToCaret();
                            txt_FPGAtxt.SelectAll();
                            txt_FPGAtxt.Focus();
                        }
                        #endregion
                    }
                    else if (mvars.deviceID.Substring(0, 2) == "03" || mvars.deviceID.Substring(0, 2) == "05")
                    {
                        #region Primary/Luxury
                        if (Form1.pvindex == mvars.FPGA_DIP_SW)
                        {
                            gboxdip.Location = lbl_FPGAtxt024.Location;
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gboxdip.BringToFront();
                                gboxdip.Visible = true;
                                label1.Visible = true;
                                chk_pgautorun.Visible = true;
                                lbl_pgautorun.Visible = true;
                                Pen p1 = new Pen(Color.Black, 1);
                                Brush b1 = new SolidBrush(Color.FromArgb(233, 233, 233));
                                int svm = mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text);
                                for (int i = lbldip.Length - 1; i >= 0; i--)
                                {
                                    Bitmap bmpb = new Bitmap(lbldip[i].Width, lbldip[i].Height);
                                    Graphics g1 = Graphics.FromImage(bmpb);
                                    //Graphics g1 = lbldip[i].CreateGraphics();
                                    if (svm / Math.Pow(2, i) >= 1)
                                    {
                                        svm = Convert.ToInt16(svm % Math.Pow(2, i));
                                        g1.DrawRectangle(p1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                        g1.FillRectangle(b1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                    }
                                    else
                                    {
                                        g1.DrawRectangle(p1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                        g1.FillRectangle(b1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                    }
                                    Image img1 = (Image)bmpb;
                                    lbldip[i].Image = img1;
                                }
                            }
                            else
                            {
                                gboxdip.Visible = true;
                            }
                        }
                        else if (Form1.pvindex == mvars.FPGA_DMR)
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" 0000");
                            cmb_FPGAtxt.Items.Add(" 0001");
                            cmb_FPGAtxt.Items.Add(" 0010");
                            cmb_FPGAtxt.Items.Add(" 0011");
                            cmb_FPGAtxt.Items.Add(" 0100");
                            cmb_FPGAtxt.Items.Add(" 0101");
                            cmb_FPGAtxt.Items.Add(" 0110");
                            cmb_FPGAtxt.Items.Add(" 0111");
                            cmb_FPGAtxt.Items.Add(" 1000");
                            cmb_FPGAtxt.Items.Add(" 1001");
                            cmb_FPGAtxt.Items.Add(" 1010");
                            cmb_FPGAtxt.Items.Add(" 1011");
                            cmb_FPGAtxt.Items.Add(" 1100");
                            cmb_FPGAtxt.Items.Add(" 1101");
                            cmb_FPGAtxt.Items.Add(" 1110");
                            cmb_FPGAtxt.Items.Add(" 1111");


                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_DMR])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == mvars.FPGA_AL_CTRL)
                        {
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gbox_alctrl.Location = lbl_FPGAtxt024.Location;
                                int svm;
                                if (mvars.deviceID.Substring(0, 2) == "03" && lblFPGAtxt[Form1.pvindex].Text == "32")
                                {
                                    gboxalctrl.Visible = true;
                                    svm = 24;
                                    for (int i = lblalctrl.Length - 1; i >= 0; i--)
                                    {
                                        if (svm / Math.Pow(2, i) >= 1) { lblalctrl[i].BackColor = Color.Cyan; svm = Convert.ToInt16(svm % Math.Pow(2, i)); } else { lblalctrl[i].BackColor = Control.DefaultBackColor; }
                                    }
                                    chk_panel.Checked = true;
                                    chk_demura.Checked = true;
                                    chk_correct.Checked = true;
                                    chk_atg.Checked = false;
                                }
                                else if (mvars.deviceID.Substring(0, 2) == "05")
                                {
                                    if (mvars.verFPGA != null && mvars.verFPGA.Length > 3 && (mvars.verFPGA.Substring(0, 2) != "66" || (mvars.verFPGA.Substring(0, 2) == "61" && Convert.ToInt16(mvars.verFPGA.Substring(3, 2)) >= 40)))
                                    {
                                        if (lblFPGAtxt[mvars.FPGA_AL_CTRL].Text == "32") { FPGAtxt[mvars.FPGA_AL_CTRL] = "19"; lblFPGAtxt[mvars.FPGA_AL_CTRL].Text = "19"; }
                                        cmb_FPGAtxt.Items.Clear();
                                        if (MultiLanguage.DefaultLanguage == "en-US")
                                        {
                                            cmb_FPGAtxt.Items.Add(" AutoGamma");
                                            cmb_FPGAtxt.Items.Add(" pre WT for tile");
                                            cmb_FPGAtxt.Items.Add(" post WT for tile");
                                            cmb_FPGAtxt.Items.Add(" pre DMR for scr.");
                                            cmb_FPGAtxt.Items.Add(" post DMR for scr.");
                                            cmb_FPGAtxt.Items.Add(" pre WT for scr.");
                                            cmb_FPGAtxt.Items.Add(" post WT for scr.");
                                            cmb_FPGAtxt.Items.Add(" pre DMR for matrix.");
                                            cmb_FPGAtxt.Items.Add(" post DMR for matrix");
                                            cmb_FPGAtxt.Items.Add(" pre WT for matrix");
                                            cmb_FPGAtxt.Items.Add(" post WT for matrix");
                                            cmb_FPGAtxt.Items.Add(" GAMUT/CCT meas.");
                                            cmb_FPGAtxt.Items.Add(" FRC enable");
                                            cmb_FPGAtxt.Items.Add(" Tile WT enable");
                                            cmb_FPGAtxt.Items.Add(" Scr. DMR enable");
                                            cmb_FPGAtxt.Items.Add(" Scr. WT enable");
                                            cmb_FPGAtxt.Items.Add(" Matrix DMR enable");
                                            cmb_FPGAtxt.Items.Add(" Matrix WT enable");
                                            cmb_FPGAtxt.Items.Add(" UI enable");
                                            cmb_FPGAtxt.Items.Add(" Screen use");
                                            cmb_FPGAtxt.Items.Add(" All disable");
                                        }
                                        else if (MultiLanguage.DefaultLanguage == "zh-CHT")
                                        {
                                            cmb_FPGAtxt.Items.Add(" AutoGamma");
                                            cmb_FPGAtxt.Items.Add(" (站) 燈板 WT 關");
                                            cmb_FPGAtxt.Items.Add(" (站) 燈板 WT 開");
                                            cmb_FPGAtxt.Items.Add(" (站) 單屏 DMR 關");
                                            cmb_FPGAtxt.Items.Add(" (站) 單屏 DMR 開");
                                            cmb_FPGAtxt.Items.Add(" (站) 單屏 WT 關");
                                            cmb_FPGAtxt.Items.Add(" (站) 單屏 WT 開");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 關");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 開");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 關");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 開");
                                            cmb_FPGAtxt.Items.Add(" 色域/色溫 量測");
                                            cmb_FPGAtxt.Items.Add(" FRC 啟用");
                                            cmb_FPGAtxt.Items.Add(" 燈板 WT 啟用");
                                            cmb_FPGAtxt.Items.Add(" 單屏 DMR 啟用");
                                            cmb_FPGAtxt.Items.Add(" 單屏 WT 啟用");
                                            cmb_FPGAtxt.Items.Add(" 大屏 DMR 啟用");
                                            cmb_FPGAtxt.Items.Add(" 大屏 WT 啟用");
                                            cmb_FPGAtxt.Items.Add(" UI 啟用");
                                            cmb_FPGAtxt.Items.Add(" 單屏出貨");
                                            cmb_FPGAtxt.Items.Add(" 全部關閉");
                                        }
                                        else if (MultiLanguage.DefaultLanguage == "zh-CN")
                                        {
                                            cmb_FPGAtxt.Items.Add(" AutoGamma");
                                            cmb_FPGAtxt.Items.Add(" (站) 灯板 WT 关");
                                            cmb_FPGAtxt.Items.Add(" (站) 灯板 WT 开");
                                            cmb_FPGAtxt.Items.Add(" (站) 单屏 DMR 关");
                                            cmb_FPGAtxt.Items.Add(" (站) 单屏 DMR 开");
                                            cmb_FPGAtxt.Items.Add(" (站) 单屏 WT 关");
                                            cmb_FPGAtxt.Items.Add(" (站) 单屏 WT 开");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 关");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 开");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 关");
                                            cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 开");
                                            cmb_FPGAtxt.Items.Add(" 色域/色温 量测");
                                            cmb_FPGAtxt.Items.Add(" FRC 启用");
                                            cmb_FPGAtxt.Items.Add(" 燈板 WT 启用");
                                            cmb_FPGAtxt.Items.Add(" 單屏 DMR 启用");
                                            cmb_FPGAtxt.Items.Add(" 單屏 WT 启用");
                                            cmb_FPGAtxt.Items.Add(" 大屏 DMR 启用");
                                            cmb_FPGAtxt.Items.Add(" 大屏 WT 启用");
                                            cmb_FPGAtxt.Items.Add(" UI 启用");
                                            cmb_FPGAtxt.Items.Add(" 单屏出货");
                                            cmb_FPGAtxt.Items.Add(" 全部关闭");
                                        }
                                        cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                                        cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                                        cmb_FPGAtxt.Width = 168;
                                        if (Convert.ToInt16(lblFPGAtxt[mvars.FPGA_AL_CTRL].Text) > cmb_FPGAtxt.Items.Count) cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(cmb_FPGAtxt.Items.Count) - 1].ToString();
                                        else cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(lblFPGAtxt[mvars.FPGA_AL_CTRL].Text)].ToString();
                                        cmb_FPGAtxt.Visible = true;
                                        btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                                        btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                                        cmb_FPGAtxt.Focus();
                                    }
                                    else
                                    {
                                        gboxalctrl.Visible = true;
                                        svm = Convert.ToInt16(lblFPGAtxt[Form1.pvindex].Text);
                                        for (int i = lblalctrl.Length - 1; i >= 0; i--)
                                        {
                                            if (svm / Math.Pow(2, i) >= 1) { lblalctrl[i].BackColor = Color.Cyan; svm = Convert.ToInt16(svm % Math.Pow(2, i)); } else { lblalctrl[i].BackColor = Control.DefaultBackColor; }
                                        }
                                        if (lblalctrl[0].BackColor == Control.DefaultBackColor) { chk_panel.Checked = true; } else { chk_panel.Checked = false; }
                                        if (lblalctrl[1].BackColor == Control.DefaultBackColor) { chk_demura.Checked = true; } else { chk_demura.Checked = false; }
                                        if (lblalctrl[3].BackColor == Control.DefaultBackColor) { chk_correct.Checked = true; } else { chk_correct.Checked = false; }
                                    }
                                }

                                if (lblalctrl[2].BackColor == Color.Cyan)
                                {
                                    chk_atg.Checked = true;
                                    chk_panel.Checked = false;
                                    chk_demura.Checked = false;
                                    chk_correct.Checked = false;
                                }
                                else { chk_atg.Checked = false; }
                            }
                            else
                            {
                                gboxalctrl.Visible = true;
                                for (int i = lblalctrl.Length - 1; i >= 0; i--)
                                {
                                    lblalctrl[i].BackColor = Control.DefaultBackColor;
                                }
                            }
                        }
                        else if (Form1.pvindex == mvars.FPGA_OM_RD)
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" MCU2FPGA");
                            cmb_FPGAtxt.Items.Add(" FPGA2MCU");
                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_OM_RD])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == 100 && (svFPGAregNo == 0 || svFPGAregNo == 2))
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" 00000");
                            cmb_FPGAtxt.Items.Add(" 00001");
                            cmb_FPGAtxt.Items.Add(" 00010");
                            cmb_FPGAtxt.Items.Add(" 00011");
                            cmb_FPGAtxt.Items.Add(" 00100");
                            cmb_FPGAtxt.Items.Add(" 00101");
                            cmb_FPGAtxt.Items.Add(" 00110");
                            cmb_FPGAtxt.Items.Add(" 00111");
                            cmb_FPGAtxt.Items.Add(" 01000");
                            cmb_FPGAtxt.Items.Add(" 01001");
                            cmb_FPGAtxt.Items.Add(" 01010");
                            cmb_FPGAtxt.Items.Add(" 01011");
                            cmb_FPGAtxt.Items.Add(" 01100");
                            cmb_FPGAtxt.Items.Add(" 01101");
                            cmb_FPGAtxt.Items.Add(" 01110");
                            cmb_FPGAtxt.Items.Add(" 01111");
                            cmb_FPGAtxt.Items.Add(" 10000");
                            cmb_FPGAtxt.Items.Add(" 10001");
                            cmb_FPGAtxt.Items.Add(" 10010");
                            cmb_FPGAtxt.Items.Add(" 10011");
                            cmb_FPGAtxt.Items.Add(" 10100");
                            cmb_FPGAtxt.Items.Add(" 10101");
                            cmb_FPGAtxt.Items.Add(" 10110");
                            cmb_FPGAtxt.Items.Add(" 10111");
                            cmb_FPGAtxt.Items.Add(" 11000");
                            cmb_FPGAtxt.Items.Add(" 11001");
                            cmb_FPGAtxt.Items.Add(" 11010");
                            cmb_FPGAtxt.Items.Add(" 11011");
                            cmb_FPGAtxt.Items.Add(" 11100");
                            cmb_FPGAtxt.Items.Add(" 11101");
                            cmb_FPGAtxt.Items.Add(" 11110");
                            cmb_FPGAtxt.Items.Add(" 11111");

                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Width = 168;
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_OM_ADDR])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == mvars.FPGA_BK_SEL)
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" 0000");
                            cmb_FPGAtxt.Items.Add(" 0001");
                            cmb_FPGAtxt.Items.Add(" 0010");
                            cmb_FPGAtxt.Items.Add(" 0011");
                            cmb_FPGAtxt.Items.Add(" 0100");
                            cmb_FPGAtxt.Items.Add(" 0101");
                            cmb_FPGAtxt.Items.Add(" 0110");
                            cmb_FPGAtxt.Items.Add(" 0111");
                            cmb_FPGAtxt.Items.Add(" 1000");
                            cmb_FPGAtxt.Items.Add(" 1001");
                            cmb_FPGAtxt.Items.Add(" 1010");
                            cmb_FPGAtxt.Items.Add(" 1011");
                            cmb_FPGAtxt.Items.Add(" 1100");
                            cmb_FPGAtxt.Items.Add(" 1101");
                            cmb_FPGAtxt.Items.Add(" 1110");
                            cmb_FPGAtxt.Items.Add(" 1111");
                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_BK_SEL])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == 52)
                        {
                            gbox_autorun.Location = lbl_FPGAtxt055.Location;
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gbox_autorun.BringToFront();
                                gbox_autorun.Visible = true;
                                if (Convert.ToInt16(lblFPGAtxt[Form1.pvindex].Text) / 32768 == 1) chk_autorun.Checked = true;
                                hsc_autorun.Value = (Convert.ToInt16(lblFPGAtxt[Form1.pvindex].Text) % 32768) / 60;
                            }
                            else
                            {
                                gbox_autorun.Visible = true;
                            }
                        }
                        else
                        {
                            txt_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            txt_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            txt_FPGAtxt.Text = lblFPGAtxt[Form1.pvindex].Text;
                            txt_FPGAtxt.Visible = true;
                            txt_FPGAtxt.Select(txt_FPGAtxt.Text.Length, 0); txt_FPGAtxt.ScrollToCaret();
                            txt_FPGAtxt.SelectAll();
                            txt_FPGAtxt.Focus();
                        }
                        #endregion
                    }
                    else if (mvars.deviceID.Substring(0, 2) == "06")
                    {
                        #region TV130
                        if (Form1.pvindex == mvars.FPGA_CODE_VER)
                        {
                            cmb_FPGAtxt.Visible = false;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            txt_FPGAtxt.Visible = false;
                        }
                        else if (Form1.pvindex == mvars.FPGA_OM_Rdata || Form1.pvindex == mvars.FPGA_CB_Rdsts || Form1.pvindex == mvars.FPGA_U0_RdCnt || Form1.pvindex == mvars.FPGA_U1_RdCnt || Form1.pvindex == mvars.FPGA_U2_RdCnt || Form1.pvindex == mvars.FPGA_U3_RdCnt || Form1.pvindex == mvars.FPGA_Ucksm_NG)
                        {

                        }
                        else if (Form1.pvindex == mvars.FPGA_SI_SEL || Form1.pvindex == mvars.FPGA_AG_MOD || Form1.pvindex == mvars.FPGA_OM_RW)
                        {
                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);

                            int Svi = Convert.ToInt32(lblClick.Text);
                            cmb_FPGAtxt.Items.Clear();
                            if (Form1.pvindex == mvars.FPGA_SI_SEL)
                            {
                                cmb_FPGAtxt.Items.Add(" DIP PC");
                                cmb_FPGAtxt.Items.Add(" DIP PG");
                                cmb_FPGAtxt.Items.Add(" UI PC");
                                cmb_FPGAtxt.Items.Add(" UI PG");
                            }
                            else if (Form1.pvindex == mvars.FPGA_AG_MOD)
                            {
                                cmb_FPGAtxt.Items.Add(" Disable");
                                cmb_FPGAtxt.Items.Add(" Enable");
                            }
                            else if (Form1.pvindex == mvars.FPGA_OM_RW)
                            {
                                cmb_FPGAtxt.Items.Add(" Write");
                                cmb_FPGAtxt.Items.Add(" Read");
                            }

                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Svi].ToString();

                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Tag = true;     //設置標記             
                            cmb_FPGAtxt.SelectAll();    //注意1
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == mvars.FPGA_GRAY_R || Form1.pvindex == mvars.FPGA_GRAY_G || Form1.pvindex == mvars.FPGA_GRAY_B)
                        {
                            gboxdip.Location = lbl_FPGAkw125.Location;
                            trackBar1.Maximum = 1023;
                            trackBar2.Maximum = 1023;
                            trackBar3.Maximum = 1023;
                            lblc[0].Text = lblFPGAtxt[mvars.FPGA_GRAY_R].Text;
                            lblc[1].Text = lblFPGAtxt[mvars.FPGA_GRAY_G].Text;
                            lblc[2].Text = lblFPGAtxt[mvars.FPGA_GRAY_B].Text;
                            trackBar1.Value = int.Parse(lblFPGAtxt[mvars.FPGA_GRAY_R].Text);
                            trackBar2.Value = int.Parse(lblFPGAtxt[mvars.FPGA_GRAY_G].Text);
                            trackBar3.Value = int.Parse(lblFPGAtxt[mvars.FPGA_GRAY_B].Text);






                            txt_FPGAtxt.Text = lblFPGAtxt[Form1.pvindex].Text;
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gboxdip.BringToFront();
                                gboxdip.Visible = true;
                                Pen p1 = new Pen(Color.Black, 1);
                                Brush b1 = new SolidBrush(Color.FromArgb(233, 233, 233));
                                int svm = mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text);
                                for (int i = lbldip.Length - 1; i >= 0; i--)
                                {
                                    Bitmap bmpb = new Bitmap(lbldip[i].Width, lbldip[i].Height);
                                    Graphics g1 = Graphics.FromImage(bmpb);
                                    //Graphics g1 = lbldip[i].CreateGraphics();
                                    if (svm / Math.Pow(2, i) >= 1)
                                    {
                                        svm = Convert.ToInt16(svm % Math.Pow(2, i));
                                        g1.DrawRectangle(p1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                        g1.FillRectangle(b1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                    }
                                    else
                                    {
                                        g1.DrawRectangle(p1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                        g1.FillRectangle(b1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                    }
                                    Image img1 = (Image)bmpb;
                                    lbldip[i].Image = img1;
                                }
                            }
                            else
                            {
                                gboxdip.Visible = true;
                            }
                            //hScrollBar1.Focus();
                            if (Form1.pvindex == mvars.FPGA_GRAY_R) trackBar1.Focus();
                            else if (Form1.pvindex == mvars.FPGA_GRAY_G) trackBar2.Focus();
                            else if (Form1.pvindex == mvars.FPGA_GRAY_B) trackBar3.Focus();
                        }
                        else
                        {
                            txt_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            txt_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            txt_FPGAtxt.Text = lblFPGAtxt[Form1.pvindex].Text;
                            txt_FPGAtxt.Visible = true;
                            txt_FPGAtxt.Select(txt_FPGAtxt.Text.Length, 0); txt_FPGAtxt.ScrollToCaret();
                            txt_FPGAtxt.SelectAll();
                            txt_FPGAtxt.Focus();
                        }
                        #endregion
                    }
                    else if (mvars.deviceID.Substring(0, 2) == "10")
                    {
                        #region CarpStreamer
                        if (Form1.pvindex == mvars.FPGA_DIP_SW)
                        {
                            gboxdip.Location = lbl_FPGAtxt024.Location;
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gboxdip.BringToFront();
                                gboxdip.Visible = true;
                                label1.Visible = true;
                                chk_pgautorun.Visible = true;
                                lbl_pgautorun.Visible = true;
                                Pen p1 = new Pen(Color.Black, 1);
                                Brush b1 = new SolidBrush(Color.FromArgb(233, 233, 233));
                                int svm = mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text);
                                for (int i = lbldip.Length - 1; i >= 0; i--)
                                {
                                    Bitmap bmpb = new Bitmap(lbldip[i].Width, lbldip[i].Height);
                                    Graphics g1 = Graphics.FromImage(bmpb);
                                    //Graphics g1 = lbldip[i].CreateGraphics();
                                    if (svm / Math.Pow(2, i) >= 1)
                                    {
                                        svm = Convert.ToInt16(svm % Math.Pow(2, i));
                                        g1.DrawRectangle(p1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                        g1.FillRectangle(b1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                    }
                                    else
                                    {
                                        g1.DrawRectangle(p1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                        g1.FillRectangle(b1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                                    }
                                    Image img1 = (Image)bmpb;
                                    lbldip[i].Image = img1;
                                }
                            }
                            else
                            {
                                gboxdip.Visible = true;
                            }
                        }
                        else if (Form1.pvindex == mvars.FPGA_DMR)
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" 0000");
                            cmb_FPGAtxt.Items.Add(" 0001");
                            cmb_FPGAtxt.Items.Add(" 0010");
                            cmb_FPGAtxt.Items.Add(" 0011");
                            cmb_FPGAtxt.Items.Add(" 0100");
                            cmb_FPGAtxt.Items.Add(" 0101");
                            cmb_FPGAtxt.Items.Add(" 0110");
                            cmb_FPGAtxt.Items.Add(" 0111");
                            cmb_FPGAtxt.Items.Add(" 1000");
                            cmb_FPGAtxt.Items.Add(" 1001");
                            cmb_FPGAtxt.Items.Add(" 1010");
                            cmb_FPGAtxt.Items.Add(" 1011");
                            cmb_FPGAtxt.Items.Add(" 1100");
                            cmb_FPGAtxt.Items.Add(" 1101");
                            cmb_FPGAtxt.Items.Add(" 1110");
                            cmb_FPGAtxt.Items.Add(" 1111");


                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_DMR])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == mvars.FPGA_AL_CTRL)
                        {
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gbox_alctrl.Location = lbl_FPGAtxt024.Location;
                                int svm;
                                if (lblFPGAtxt[mvars.FPGA_AL_CTRL].Text == "32") { FPGAtxt[mvars.FPGA_AL_CTRL] = "19"; lblFPGAtxt[mvars.FPGA_AL_CTRL].Text = "19"; }
                                cmb_FPGAtxt.Items.Clear();
                                if (MultiLanguage.DefaultLanguage == "en-US")
                                {
                                    cmb_FPGAtxt.Items.Add(" AutoGamma");
                                    cmb_FPGAtxt.Items.Add(" pre WT for tile");
                                    cmb_FPGAtxt.Items.Add(" post WT for tile");
                                    cmb_FPGAtxt.Items.Add(" pre DMR for scr.");
                                    cmb_FPGAtxt.Items.Add(" post DMR for scr.");
                                    cmb_FPGAtxt.Items.Add(" pre WT for scr.");
                                    cmb_FPGAtxt.Items.Add(" post WT for scr.");
                                    cmb_FPGAtxt.Items.Add(" pre DMR for matrix.");
                                    cmb_FPGAtxt.Items.Add(" post DMR for matrix");
                                    cmb_FPGAtxt.Items.Add(" pre WT for matrix");
                                    cmb_FPGAtxt.Items.Add(" post WT for matrix");
                                    cmb_FPGAtxt.Items.Add(" GAMUT/CCT meas.");
                                    cmb_FPGAtxt.Items.Add(" FRC enable");
                                    cmb_FPGAtxt.Items.Add(" Tile WT enable");
                                    cmb_FPGAtxt.Items.Add(" Scr. DMR enable");
                                    cmb_FPGAtxt.Items.Add(" Scr. WT enable");
                                    cmb_FPGAtxt.Items.Add(" Matrix DMR enable");
                                    cmb_FPGAtxt.Items.Add(" Matrix WT enable");
                                    cmb_FPGAtxt.Items.Add(" UI enable");
                                    cmb_FPGAtxt.Items.Add(" Screen use");
                                    cmb_FPGAtxt.Items.Add(" All disable");
                                }
                                else if (MultiLanguage.DefaultLanguage == "zh-CHT")
                                {
                                    cmb_FPGAtxt.Items.Add(" AutoGamma");
                                    cmb_FPGAtxt.Items.Add(" (站) 燈板 WT 關");
                                    cmb_FPGAtxt.Items.Add(" (站) 燈板 WT 開");
                                    cmb_FPGAtxt.Items.Add(" (站) 單屏 DMR 關");
                                    cmb_FPGAtxt.Items.Add(" (站) 單屏 DMR 開");
                                    cmb_FPGAtxt.Items.Add(" (站) 單屏 WT 關");
                                    cmb_FPGAtxt.Items.Add(" (站) 單屏 WT 開");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 關");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 開");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 關");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 開");
                                    cmb_FPGAtxt.Items.Add(" 色域/色溫 量測");
                                    cmb_FPGAtxt.Items.Add(" FRC 啟用");
                                    cmb_FPGAtxt.Items.Add(" 燈板 WT 啟用");
                                    cmb_FPGAtxt.Items.Add(" 單屏 DMR 啟用");
                                    cmb_FPGAtxt.Items.Add(" 單屏 WT 啟用");
                                    cmb_FPGAtxt.Items.Add(" 大屏 DMR 啟用");
                                    cmb_FPGAtxt.Items.Add(" 大屏 WT 啟用");
                                    cmb_FPGAtxt.Items.Add(" UI 啟用");
                                    cmb_FPGAtxt.Items.Add(" 單屏出貨");
                                    cmb_FPGAtxt.Items.Add(" 全部關閉");
                                }
                                else if (MultiLanguage.DefaultLanguage == "zh-CN")
                                {
                                    cmb_FPGAtxt.Items.Add(" AutoGamma");
                                    cmb_FPGAtxt.Items.Add(" (站) 灯板 WT 关");
                                    cmb_FPGAtxt.Items.Add(" (站) 灯板 WT 开");
                                    cmb_FPGAtxt.Items.Add(" (站) 单屏 DMR 关");
                                    cmb_FPGAtxt.Items.Add(" (站) 单屏 DMR 开");
                                    cmb_FPGAtxt.Items.Add(" (站) 单屏 WT 关");
                                    cmb_FPGAtxt.Items.Add(" (站) 单屏 WT 开");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 关");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 DMR 开");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 关");
                                    cmb_FPGAtxt.Items.Add(" (站) 大屏 WT 开");
                                    cmb_FPGAtxt.Items.Add(" 色域/色温 量测");
                                    cmb_FPGAtxt.Items.Add(" FRC 启用");
                                    cmb_FPGAtxt.Items.Add(" 燈板 WT 启用");
                                    cmb_FPGAtxt.Items.Add(" 單屏 DMR 启用");
                                    cmb_FPGAtxt.Items.Add(" 單屏 WT 启用");
                                    cmb_FPGAtxt.Items.Add(" 大屏 DMR 启用");
                                    cmb_FPGAtxt.Items.Add(" 大屏 WT 启用");
                                    cmb_FPGAtxt.Items.Add(" UI 启用");
                                    cmb_FPGAtxt.Items.Add(" 单屏出货");
                                    cmb_FPGAtxt.Items.Add(" 全部关闭");
                                }
                                cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                                cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                                cmb_FPGAtxt.Width = 168;
                                if (Convert.ToInt16(lblFPGAtxt[mvars.FPGA_AL_CTRL].Text) > cmb_FPGAtxt.Items.Count) cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(cmb_FPGAtxt.Items.Count) - 1].ToString();
                                else cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(lblFPGAtxt[mvars.FPGA_AL_CTRL].Text)].ToString();
                                cmb_FPGAtxt.Visible = true;
                                btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                                btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                                cmb_FPGAtxt.Focus();

                                if (lblalctrl[2].BackColor == Color.Cyan)
                                {
                                    chk_atg.Checked = true;
                                    chk_panel.Checked = false;
                                    chk_demura.Checked = false;
                                    chk_correct.Checked = false;
                                }
                                else { chk_atg.Checked = false; }
                            }
                            else
                            {
                                gboxalctrl.Visible = true;
                                for (int i = lblalctrl.Length - 1; i >= 0; i--)
                                {
                                    lblalctrl[i].BackColor = Control.DefaultBackColor;
                                }
                            }
                        }
                        else if (Form1.pvindex == mvars.FPGA_OM_RD)
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" MCU2FPGA");
                            cmb_FPGAtxt.Items.Add(" FPGA2MCU");
                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_OM_RD])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == 100 && (svFPGAregNo == 0 || svFPGAregNo == 2))
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" 00000");
                            cmb_FPGAtxt.Items.Add(" 00001");
                            cmb_FPGAtxt.Items.Add(" 00010");
                            cmb_FPGAtxt.Items.Add(" 00011");
                            cmb_FPGAtxt.Items.Add(" 00100");
                            cmb_FPGAtxt.Items.Add(" 00101");
                            cmb_FPGAtxt.Items.Add(" 00110");
                            cmb_FPGAtxt.Items.Add(" 00111");
                            cmb_FPGAtxt.Items.Add(" 01000");
                            cmb_FPGAtxt.Items.Add(" 01001");
                            cmb_FPGAtxt.Items.Add(" 01010");
                            cmb_FPGAtxt.Items.Add(" 01011");
                            cmb_FPGAtxt.Items.Add(" 01100");
                            cmb_FPGAtxt.Items.Add(" 01101");
                            cmb_FPGAtxt.Items.Add(" 01110");
                            cmb_FPGAtxt.Items.Add(" 01111");
                            cmb_FPGAtxt.Items.Add(" 10000");
                            cmb_FPGAtxt.Items.Add(" 10001");
                            cmb_FPGAtxt.Items.Add(" 10010");
                            cmb_FPGAtxt.Items.Add(" 10011");
                            cmb_FPGAtxt.Items.Add(" 10100");
                            cmb_FPGAtxt.Items.Add(" 10101");
                            cmb_FPGAtxt.Items.Add(" 10110");
                            cmb_FPGAtxt.Items.Add(" 10111");
                            cmb_FPGAtxt.Items.Add(" 11000");
                            cmb_FPGAtxt.Items.Add(" 11001");
                            cmb_FPGAtxt.Items.Add(" 11010");
                            cmb_FPGAtxt.Items.Add(" 11011");
                            cmb_FPGAtxt.Items.Add(" 11100");
                            cmb_FPGAtxt.Items.Add(" 11101");
                            cmb_FPGAtxt.Items.Add(" 11110");
                            cmb_FPGAtxt.Items.Add(" 11111");

                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Width = 168;
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_OM_ADDR])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == mvars.FPGA_BK_SEL)
                        {
                            cmb_FPGAtxt.Items.Clear();
                            cmb_FPGAtxt.Items.Add(" 0000");
                            cmb_FPGAtxt.Items.Add(" 0001");
                            cmb_FPGAtxt.Items.Add(" 0010");
                            cmb_FPGAtxt.Items.Add(" 0011");
                            cmb_FPGAtxt.Items.Add(" 0100");
                            cmb_FPGAtxt.Items.Add(" 0101");
                            cmb_FPGAtxt.Items.Add(" 0110");
                            cmb_FPGAtxt.Items.Add(" 0111");
                            cmb_FPGAtxt.Items.Add(" 1000");
                            cmb_FPGAtxt.Items.Add(" 1001");
                            cmb_FPGAtxt.Items.Add(" 1010");
                            cmb_FPGAtxt.Items.Add(" 1011");
                            cmb_FPGAtxt.Items.Add(" 1100");
                            cmb_FPGAtxt.Items.Add(" 1101");
                            cmb_FPGAtxt.Items.Add(" 1110");
                            cmb_FPGAtxt.Items.Add(" 1111");
                            cmb_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            cmb_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            cmb_FPGAtxt.Text = cmb_FPGAtxt.Items[Convert.ToInt16(FPGAtxt[mvars.FPGA_BK_SEL])].ToString();
                            cmb_FPGAtxt.Visible = true;
                            btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                            btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
                            cmb_FPGAtxt.Focus();
                        }
                        else if (Form1.pvindex == 52)
                        {
                            gbox_autorun.Location = lbl_FPGAtxt055.Location;
                            if (lblFPGAtxt[Form1.pvindex].Text != "")
                            {
                                gbox_autorun.BringToFront();
                                gbox_autorun.Visible = true;
                                if (Convert.ToInt16(lblFPGAtxt[Form1.pvindex].Text) / 32768 == 1) chk_autorun.Checked = true;
                                hsc_autorun.Value = (Convert.ToInt16(lblFPGAtxt[Form1.pvindex].Text) % 32768) / 60;
                            }
                            else
                            {
                                gbox_autorun.Visible = true;
                            }
                        }
                        else
                        {
                            txt_FPGAtxt.Location = new Point(lblClick.Left, lblClick.Top);
                            txt_FPGAtxt.Size = new Size(lblClick.Width, 18);
                            txt_FPGAtxt.Text = lblFPGAtxt[Form1.pvindex].Text;
                            txt_FPGAtxt.Visible = true;
                            txt_FPGAtxt.Select(txt_FPGAtxt.Text.Length, 0); txt_FPGAtxt.ScrollToCaret();
                            txt_FPGAtxt.SelectAll();
                            txt_FPGAtxt.Focus();
                        }
                        #endregion
                    }

                }
            }
            else if (e.Button == MouseButtons.Right)
            {
                cmb_FPGAtxt.Visible = false;
                txt_FPGAtxt.Visible = false;
                if (lblFPGAkw[Form1.pvindex].Text.Length > 5)
                {
                    if (lblFPGAtxt[Form1.pvindex].BackColor == Color.White) { lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = true; }
                    else if (lblFPGAtxt[Form1.pvindex].BackColor == Color.Cyan) { lblFPGAtxt[Form1.pvindex].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[Form1.pvindex] = false; }
                }
            }
            btn_FPGAR.Enabled = true;
            btn_FPGAW.Enabled = true;
        }

        private void lbltxt_MouseEnter(object sender, EventArgs e)
        {
            Label lblClick = (Label)sender;   //將sender轉型為按鈕物件btnClick
            int svpvindex = Convert.ToInt32(lblClick.Tag);
            if (svpvindex == 1)
            {
                mvars.toolTip1.SetToolTip(lblFPGAtxt[svpvindex], "DIP1 ~ DIP8");
            }
            else if (svpvindex == 2)
            {
                mvars.toolTip1.SetToolTip(lblFPGAtxt[svpvindex], "0:CB0，1:CB1");
            }
        }



        private void cmb_FPGAtxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down || e.KeyCode == Keys.Escape)
            {
                cmb_FPGAtxt.Visible = false;
                btn_FPGAW.Enabled = !cmb_FPGAtxt.Visible;
                btn_FPGAR.Enabled = !cmb_FPGAtxt.Visible;
            }
        }



        private void chkalctrl_cal()
        {
            if (mvars.deviceID.Substring(0, 2) == "03" || mvars.deviceID.Substring(0, 2) == "05")
            {
                lbl_alg.Text = "";
                //lblalctrl[0].BackColor = Control.DefaultBackColor; 
                //lblalctrl[1].BackColor = Control.DefaultBackColor; 
                //lblalctrl[2].BackColor = Control.DefaultBackColor; 
                //lblalctrl[3].BackColor = Control.DefaultBackColor; 
                //lblalctrl[4].BackColor = Control.DefaultBackColor; 
                //lblalctrl[5].BackColor = Control.DefaultBackColor;
                //分兩大類AutoGamma與非AutoGamma選擇下
                if (chk_atg.Checked)
                {
                    lblalctrl[2].BackColor = Color.Cyan;
                }
                else
                {
                    if (chk_correct.Checked == false && chk_demura.Checked == false && chk_panel.Checked == false)
                    {
                        if (MultiLanguage.DefaultLanguage == "en-US") { lbl_alg.Text = "14bit LB WT"; }
                        else if (MultiLanguage.DefaultLanguage == "zh-CHT") { lbl_alg.Text = "14bit 燈板 WT"; }
                        else if (MultiLanguage.DefaultLanguage == "zh-CN") { lbl_alg.Text = "14bit 灯板 WT"; }
                        lblalctrl[0].BackColor = Control.DefaultBackColor;
                        lblalctrl[1].BackColor = Control.DefaultBackColor;
                        lblalctrl[2].BackColor = Control.DefaultBackColor;
                        lblalctrl[3].BackColor = Control.DefaultBackColor;
                        lblalctrl[4].BackColor = Control.DefaultBackColor;
                        lblalctrl[5].BackColor = Control.DefaultBackColor;

                    }
                    else if (chk_correct.Checked && chk_demura.Checked && chk_panel.Checked)
                    {
                        lblalctrl[3].BackColor = Color.Cyan;
                        lblalctrl[4].BackColor = Color.Cyan;
                    }
                    else
                    {
                        lblalctrl[5].BackColor = Color.Cyan;
                        //if (chk_correct.Checked == false || chk_demura.Checked == false || chk_panel.Checked == false)
                        //{
                        //    lblalctrl[5].BackColor = Color.Cyan;
                        //    if (chk_correct.Checked == false)
                        //    {
                        //        lblalctrl[3].BackColor = Color.Cyan;
                        //    }
                        //    if (chk_demura.Checked == false)
                        //    {
                        //        lblalctrl[1].BackColor = Color.Cyan;
                        //    }
                        //    if (chk_panel.Checked == false)
                        //    {
                        //        lblalctrl[0].BackColor = Color.Cyan;
                        //    }
                        //}
                    }
                }
            }

            double svsum = 0;
            for (int i = 0; i < lblalctrl.Length; i++)
            {
                if (lblalctrl[i].BackColor == Color.Cyan) { svsum += Math.Pow(2, i); }
            }
            lblFPGAtxt[mvars.FPGA_AL_CTRL].Text = svsum.ToString();
            if (svsum != Convert.ToInt16(FPGAtxt[mvars.FPGA_AL_CTRL])) { lblFPGAtxt[mvars.FPGA_AL_CTRL].BackColor = Color.Cyan; }
            else { lblFPGAtxt[mvars.FPGA_AL_CTRL].BackColor = Color.White; }
        }

        private void chk_atg_CheckedChanged(object sender, EventArgs e) { }
        private void chk_atg_Click(object sender, EventArgs e)
        {
            lblalctrl[0].BackColor = Control.DefaultBackColor;
            lblalctrl[1].BackColor = Control.DefaultBackColor;
            lblalctrl[2].BackColor = Control.DefaultBackColor;
            lblalctrl[3].BackColor = Control.DefaultBackColor;
            lblalctrl[4].BackColor = Control.DefaultBackColor;
            lblalctrl[5].BackColor = Control.DefaultBackColor;

            if (chk_atg.Checked)
            {
                chk_correct.Checked = false;
                chk_demura.Checked = false;
                chk_panel.Checked = false;
            }
            else
            {
                chk_correct.Checked = true;
                chk_demura.Checked = true;
                chk_panel.Checked = true;
            }
            chkalctrl_cal();
        }

        private void chk_correct_CheckedChanged(object sender, EventArgs e) { }
        private void chk_correct_Click(object sender, EventArgs e)
        {
            //大屏WT
            lblalctrl[0].BackColor = Control.DefaultBackColor;
            lblalctrl[1].BackColor = Control.DefaultBackColor;
            lblalctrl[2].BackColor = Control.DefaultBackColor;
            lblalctrl[3].BackColor = Control.DefaultBackColor;
            lblalctrl[4].BackColor = Control.DefaultBackColor;
            lblalctrl[5].BackColor = Control.DefaultBackColor;
            if (chk_correct.Checked == false) lblalctrl[3].BackColor = Color.Cyan;
            else
            {
                if (chk_demura.Checked == false && chk_panel.Checked) lblalctrl[1].BackColor = Color.Cyan;
                else if (chk_demura.Checked && chk_panel.Checked == false) lblalctrl[0].BackColor = Color.Cyan;
                else if (chk_demura.Checked == false && chk_panel.Checked == false) { chk_demura.Checked = true; chk_panel.Checked = true; chk_atg.Checked = false; }
            }
            chkalctrl_cal();
        }

        private void chk_demura_CheckedChanged(object sender, EventArgs e) { }
        private void chk_demura_Click(object sender, EventArgs e)
        {
            //大屏Demura
            lblalctrl[0].BackColor = Control.DefaultBackColor;
            lblalctrl[1].BackColor = Control.DefaultBackColor;
            lblalctrl[2].BackColor = Control.DefaultBackColor;
            lblalctrl[3].BackColor = Control.DefaultBackColor;
            lblalctrl[4].BackColor = Control.DefaultBackColor;
            lblalctrl[5].BackColor = Control.DefaultBackColor;
            if (chk_demura.Checked == false) lblalctrl[1].BackColor = Color.Cyan;
            else
            {
                if (chk_correct.Checked == false && chk_panel.Checked) lblalctrl[3].BackColor = Color.Cyan;
                else if (chk_correct.Checked && chk_panel.Checked == false) lblalctrl[0].BackColor = Color.Cyan;
                else if (chk_correct.Checked == false && chk_panel.Checked == false) { chk_correct.Checked = true; chk_panel.Checked = true; chk_atg.Checked = false; }
            }
            chkalctrl_cal();
        }

        private void chk_panel_CheckedChanged(object sender, EventArgs e) { }
        private void chk_panel_Click(object sender, EventArgs e)
        {
            //燈板WT
            lblalctrl[0].BackColor = Control.DefaultBackColor;
            lblalctrl[1].BackColor = Control.DefaultBackColor;
            lblalctrl[2].BackColor = Control.DefaultBackColor;
            lblalctrl[3].BackColor = Control.DefaultBackColor;
            lblalctrl[4].BackColor = Control.DefaultBackColor;
            lblalctrl[5].BackColor = Control.DefaultBackColor;
            if (chk_panel.Checked == false) lblalctrl[0].BackColor = Color.Cyan;
            else
            {
                if (chk_correct.Checked == false && chk_demura.Checked) lblalctrl[3].BackColor = Color.Cyan;
                else if (chk_correct.Checked && chk_demura.Checked == false) lblalctrl[1].BackColor = Color.Cyan;
                else if (chk_correct.Checked == false && chk_demura.Checked == false) { chk_correct.Checked = true; chk_demura.Checked = true; chk_atg.Checked = false; }
            }
            chkalctrl_cal();
        }


        private void lbl_alctrl5_Click(object sender, EventArgs e)
        {
            Label lblClick = (Label)sender;   //將sender轉型為按鈕物件btnClick
            int svindex = Convert.ToInt32(lblClick.Tag);
            if (svindex == 5 && lblClick.BackColor == Color.Cyan)
            {
                lblalctrl[0].BackColor = Control.DefaultBackColor;
                lblalctrl[1].BackColor = Control.DefaultBackColor;
                lblalctrl[2].BackColor = Control.DefaultBackColor;
                lblalctrl[3].BackColor = Control.DefaultBackColor;
                lblalctrl[4].BackColor = Control.DefaultBackColor;
                lblalctrl[5].BackColor = Control.DefaultBackColor;

                chk_correct.Checked = false;
                chk_atg.Checked = false;
                chk_demura.Checked = false;
                chk_panel.Checked = false;

                lblFPGAtxt[mvars.FPGA_AL_CTRL].Text = "0";
                if (FPGAtxt[mvars.FPGA_AL_CTRL] != "0") { lblFPGAtxt[mvars.FPGA_AL_CTRL].BackColor = Color.Cyan; }
                else { lblFPGAtxt[mvars.FPGA_AL_CTRL].BackColor = Color.White; }

            }
        }

        private void btn_FPGAR_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right && svFPGAregNo == 1)
            {
                gboxdip.Visible = false;
                gboxalctrl.Visible = false;
                svFPGAshowstatus = !(svFPGAshowstatus); gboxFPGAstatus.Visible = svFPGAshowstatus;
            }
        }





        private void lbl_FPGAtxt000_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left && Form1.pvindex == 0)
            {
                if (lblFPGAtxt[1].BackColor == Color.Cyan)
                {
                    for (int Svi = 0; Svi < lblns; Svi++)
                    {
                        if (lblFPGAtxt[Svi] != null && lblFPGAtxt[Svi].Visible == true && lblFPGAtxt[Svi].BackColor == Color.Cyan)
                        {
                            lblFPGAtxt[Svi].BackColor = Color.White;
                            lblFPGAtxt[Svi].ForeColor = Color.Black;
                        }
                    }
                }
                else
                {
                    for (int Svi = 0; Svi < lblns; Svi++)
                    {
                        if (lblFPGAtxt[Svi] != null && lblFPGAtxt[Svi].Visible == true && FPGAtxtDef[Svi] != "" && lblFPGAkw[Svi].Text.IndexOf("OM_", 0) == -1)
                        {
                            lblFPGAtxt[Svi].BackColor = Color.Cyan;
                            lblFPGAtxt[Svi].ForeColor = Color.Black;
                        }
                    }
                }
            }
        }


        private void lbldip_MouseDown(object sender, MouseEventArgs e) { }
        private void lbldip_MouseUp(object sender, MouseEventArgs e)
        {
            Label lbl = (Label)sender;   //將sender轉型為按鈕物件btnClick
            if (e.Button == MouseButtons.Left)
            {
                Bitmap bmpb = new Bitmap(lbl.Width, lbl.Height);
                Pen p1 = new Pen(Color.Black, 1);
                Graphics g1 = Graphics.FromImage(bmpb);
                Brush b1 = new SolidBrush(Color.FromArgb(233, 233, 233));
                if (e.Y <= 15)
                {
                    g1.DrawRectangle(p1, new Rectangle(2, 2, lbl.Width - 5, lbl.Height / 2 - 5));
                    g1.FillRectangle(b1, new Rectangle(2, 2, lbl.Width - 5, lbl.Height / 2 - 5));
                }
                else
                {
                    g1.DrawRectangle(p1, new Rectangle(2, 2 + lbl.Height / 2, lbl.Width - 5, lbl.Height / 2 - 5));
                    g1.FillRectangle(b1, new Rectangle(2, 2 + lbl.Height / 2, lbl.Width - 5, lbl.Height / 2 - 5));
                }
                Image img1 = (Image)bmpb;
                lbl.Image = img1;
                g1.Dispose();
                b1.Dispose();

                double svsum = 0;
                for (int i = 0; i < lbldip.Length; i++)
                {
                    Bitmap bmp1 = new Bitmap(lbldip[i].Image);
                    Color pixelColor = bmp1.GetPixel(10, 10);
                    if (pixelColor.R == 233) { svsum += Math.Pow(2, i); }
                    bmp1.Dispose();
                }
                lblFPGAtxt[mvars.FPGA_DIP_SW].Text = mp.DecToBin((int)svsum, 8);
                if (lblFPGAtxt[mvars.FPGA_DIP_SW].Text == "" && lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor != Color.Cyan)
                {
                    lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.Cyan;
                }
                else
                {
                    if (FPGAtxt[mvars.FPGA_DIP_SW] != "")
                    {
                        if (Convert.ToInt16(svsum) != mp.BinToDec(FPGAtxt[mvars.FPGA_DIP_SW])) { lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.Cyan; }
                        else { lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.White; }
                    }
                    else { if (lblFPGAtxt[mvars.FPGA_DIP_SW].Text != "00000000") { lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.Cyan; } }
                }
            }
        }

        private void label1_MouseUp(object sender, MouseEventArgs e)
        {
            string svbin = "00000000";
            if (e.Y <= 13) svbin = "01100000";
            else if (e.Y > 13 && e.Y <= 27) svbin = "10100000";
            else if (e.Y > 28 && e.Y < 41) svbin = "11000000";
            else if (e.Y >= 41) svbin = "11100000";

            Pen p1 = new Pen(Color.Black, 1);
            Brush b1 = new SolidBrush(Color.FromArgb(233, 233, 233));
            int svm = mp.BinToDec(svbin);
            for (int i = lbldip.Length - 1; i >= 0; i--)
            {
                Bitmap bmpb = new Bitmap(lbldip[i].Width, lbldip[i].Height);
                Graphics g1 = Graphics.FromImage(bmpb);
                //Graphics g1 = lbldip[i].CreateGraphics();
                if (svm / Math.Pow(2, i) >= 1)
                {
                    svm = Convert.ToInt16(svm % Math.Pow(2, i));
                    g1.DrawRectangle(p1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                    g1.FillRectangle(b1, new Rectangle(2, 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                }
                else
                {
                    g1.DrawRectangle(p1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                    g1.FillRectangle(b1, new Rectangle(2, 2 + lbldip[i].Height / 2, lbldip[i].Width - 5, lbldip[i].Height / 2 - 5));
                }
                Image img1 = (Image)bmpb;
                lbldip[i].Image = img1;
            }

            double svsum = 0;
            for (int i = 0; i < lbldip.Length; i++)
            {
                Bitmap bmp1 = new Bitmap(lbldip[i].Image);
                Color pixelColor = bmp1.GetPixel(10, 10);
                if (pixelColor.R == 233) { svsum += Math.Pow(2, i); }
                bmp1.Dispose();
            }
            lblFPGAtxt[mvars.FPGA_DIP_SW].Text = mp.DecToBin((int)svsum, 8);
            if (lblFPGAtxt[mvars.FPGA_DIP_SW].Text == "" && lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor != Color.Cyan)
            {
                lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.Cyan;
            }
            else
            {
                if (FPGAtxt[mvars.FPGA_DIP_SW] != "")
                {
                    if (Convert.ToInt16(svsum) != mp.BinToDec(FPGAtxt[mvars.FPGA_DIP_SW])) { lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.Cyan; }
                    else { lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.White; }
                }
                else { if (lblFPGAtxt[mvars.FPGA_DIP_SW].Text != "00000000") { lblFPGAtxt[mvars.FPGA_DIP_SW].BackColor = Color.Cyan; } }
            }
        }

        private void label1_MouseMove(object sender, MouseEventArgs e)
        {
            //label2.Text = e.X + "," + e.Y;
        }








        private void btn_FPGAHWRST_Click(object sender, EventArgs e)
        {
            if (mvars.demoMode == false)
            {
                if (mp.Sp1open(Form1.tslblCOM.Text).Substring(0, 5) == "false") { MessageBox.Show("COM error" + "\r\n" + "\r\n" + "Please check", mvars.strUInameMe + "_v" + mvars.UImajor); return; }
                Form1.tslblHW.Text = "232"; Form1.tslblHW.BackColor = Color.Blue; Form1.tslblHW.ForeColor = Color.White;
            }
            else { MessageBox.Show("demo mode"); }

            this.Enabled = false;
            markreset(2, false, true);

            mvars.lblCmd = "FPGA_HW_RESET";
            mp.mhFPGARESET(0x80);
            //mvars.lstget.Items.Add(" --> Wait 10s"); mvars.lstget.TopIndex = mvars.lstget.Items.Count - 1;
            //mp.doDelayms(10000);

            if (mvars.demoMode == false) { mp.CommClose(); }
            this.Enabled = true;
        }

        private void chk_pgautorun_CheckedChanged(object sender, EventArgs e) { }
        private void chk_pgautorun_Click(object sender, EventArgs e)
        {
            if (chk_pgautorun.Checked)
            {
                int[] svreg = new int[] { 1, 48, 49, 50 };
                int[] svdata = new int[] { 96, 255, 0, 0 };

                mvars.lblCmd = "FPGA_SPI_W";
                mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) == -1) { chk_pgautorun.Checked = false; }
                lbl_pgautorun.Text = "0";
            }
            tme_pgautorun.Enabled = chk_pgautorun.Checked;
        }

        private void tme_pgautorun_Tick(object sender, EventArgs e)
        {
            tme_pgautorun.Enabled = false;
            int[] svreg = new int[] { 1, 48, 49, 50 };
            int[] svdata = new int[] { 96, 255, 0, 0 };
            switch (lbl_pgautorun.Text)
            {
                case "0":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 96, 255, 0, 0 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "1"; tme_pgautorun.Enabled = true; }
                    break;
                case "1":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 96, 0, 255, 0 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "2"; tme_pgautorun.Enabled = true; }
                    break;
                case "2":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 96, 0, 0, 255 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "3"; tme_pgautorun.Enabled = true; }
                    break;
                case "3":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 96, 255, 255, 255 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "4"; tme_pgautorun.Enabled = true; }
                    break;
                case "4":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 96, 255, 255, 255 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "5"; tme_pgautorun.Enabled = true; }
                    break;
                case "5":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 160, 255, 255, 255 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "6"; tme_pgautorun.Enabled = true; }
                    break;
                case "6":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 192, 255, 255, 255 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "7"; tme_pgautorun.Enabled = true; }
                    break;
                case "7":
                    svreg = new int[] { 1, 48, 49, 50 };
                    svdata = new int[] { 224, 255, 255, 255 };
                    mvars.lblCmd = "FPGA_SPI_W";
                    mp.mhFPGASPIWRITE(mvars.FPGAsel, svreg, svdata);
                    if (mvars.lGet[mvars.lCount - 1].IndexOf("DONE", 0) != -1) { lbl_pgautorun.Text = "0"; tme_pgautorun.Enabled = true; }
                    break;
            }
        }

        private void hsc_autorun_Scroll(object sender, ScrollEventArgs e)
        {
            lbl_autorunT.Text = hsc_autorun.Value.ToString();
            if (chk_autorun.Checked) lblFPGAtxt[Form1.pvindex].Text = (32768 + hsc_autorun.Value * 60).ToString();
            else lblFPGAtxt[Form1.pvindex].Text = (hsc_autorun.Value * 60).ToString();
        }

        private void hsc_autorun_ValueChanged(object sender, EventArgs e)
        {
            lbl_autorunT.Text = hsc_autorun.Value.ToString();
            if (chk_autorun.Checked) lblFPGAtxt[Form1.pvindex].Text = (32768 + hsc_autorun.Value * 60).ToString();
            else lblFPGAtxt[Form1.pvindex].Text = (hsc_autorun.Value * 60).ToString();
        }

        private void chk_autorun_Click(object sender, EventArgs e)
        {
            if (chk_autorun.Checked) lblFPGAtxt[Form1.pvindex].Text = (32768 + hsc_autorun.Value * 60).ToString();
            else lblFPGAtxt[Form1.pvindex].Text = (Convert.ToInt32(lblFPGAtxt[Form1.pvindex].Text) - 32768).ToString();

            if (lblFPGAtxt[Form1.pvindex].Text != FPGAtxt[Form1.pvindex]) lblFPGAtxt[Form1.pvindex].BackColor = Color.Cyan;
            else lblFPGAtxt[Form1.pvindex].BackColor = Color.White;
        }

        private void cmb_FPGAsel_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06")
            {
                Form1.cmbFPGAsel.SelectedIndex = cmb_FPGAsel.SelectedIndex;
                Form1.cmbFPGAsel.Text = Form1.cmbFPGAsel.Items[mvars.FPGAsel].ToString();
                if (mvars.FPGAsel == 0 || mvars.FPGAsel == 2)
                    lbl_FPGAsel.Text = "L data";
                else
                    lbl_FPGAsel.Text = "R data";
                if (svfpgareg != null && svfpgareg.GetLength(0) == 2)
                {
                    byte svFPGAsel = mvars.FPGAsel;
                    if (mvars.FPGAsel == 2) svFPGAsel = 0;
                    for (int svi = 0; svi < lblns; svi++)
                    {
                        if (lblFPGAtxt[svi] != null && lblFPGAtxt[svi].Visible == true)
                        {
                            lblFPGAtxt[svi].Text = "";
                            mp.doDelayms(1);
                            lblFPGAtxt[svi].Text = svfpgareg[svFPGAsel, svi];
                        }
                    }
                }
            }
        }

        private void cmb_deviceID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06")
            {
                Form1.cmbdeviceid.SelectedIndex = cmb_deviceID.SelectedIndex;
            }
        }





        



        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            TrackBar tbar = (TrackBar)sender;
            mvars.hscF2sel = Convert.ToByte(tbar.Tag);
            if (flgkeysUD) 
            { 
                flgkeysUD = false;
                tbar.Value = int.Parse(lblc[mvars.hscF2sel - mvars.FPGA_GRAY_R].Text);
                return; 
            }
            if (chk_Lock.Checked)
            {
                lblFPGAtxt[mvars.FPGA_GRAY_R].Text = tbar.Value.ToString();
                lblFPGAtxt[mvars.FPGA_GRAY_G].Text = tbar.Value.ToString();
                lblFPGAtxt[mvars.FPGA_GRAY_B].Text = tbar.Value.ToString();
                trackBar2.Value = trackBar1.Value;
                trackBar3.Value = trackBar1.Value;
            }
            else
                lblFPGAtxt[mvars.hscF2sel].Text = tbar.Value.ToString();
        }

        private void trackBar1_MouseDown(object sender, MouseEventArgs e)
        {
            //TrackBar tbar = (TrackBar)sender;
            //mvars.hscF2sel = Convert.ToInt16(tbar.Tag);
            //if (Form1.pvindex == mvars.FPGA_GRAY_R) lbl_Rv.Text = lblFPGAtxt[mvars.FPGA_GRAY_R].Text;
            //else if (Form1.pvindex == mvars.FPGA_GRAY_G) lbl_Gv.Text = lblFPGAtxt[mvars.FPGA_GRAY_G].Text;
            //else if (Form1.pvindex == mvars.FPGA_GRAY_B) lbl_Bv.Text = lblFPGAtxt[mvars.FPGA_GRAY_B].Text;
            //txt_FPGAtxt.Text = lblFPGAtxt[Form1.pvindex].Text;
            //txt_FPGAtxt.Text = tbar.Value.ToString();
        }

        private void trackBar1_MouseUp(object sender, MouseEventArgs e)
        {
            TrackBar tbar = (TrackBar)sender;
            mvars.hscF2sel = Convert.ToByte(tbar.Tag);
            if (flgkeysUD == false)
            {
                if (FPGAtxt[mvars.hscF2sel] == lblFPGAtxt[mvars.hscF2sel].Text)
                {
                    lblFPGAtxt[mvars.hscF2sel].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[mvars.hscF2sel] = false;
                    lblFPGAkw[mvars.hscF2sel].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[mvars.hscF2sel] = false;
                }
                else
                {
                    lblFPGAtxt[mvars.hscF2sel].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[mvars.hscF2sel] = true;
                    lblFPGAkw[mvars.hscF2sel].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[Form1.pvindex] = true;
                    if (mvars.demoMode)
                    {
                        //MessageBox.Show("demo mode");

                    }
                    else
                    {
                        if (mp.Sp1open(Form1.tslblCOM.Text).Substring(0, 5) == "false") { MessageBox.Show("COM error" + "\r\n" + "\r\n" + "Please check", mvars.strUInameMe + "_v" + mvars.UImajor); return; }
                        Form1.tslblHW.Text = "232"; Form1.tslblHW.BackColor = Color.Blue; Form1.tslblHW.ForeColor = Color.White;
                        this.Enabled = false;
                        markreset(5, false, true);
                        mvars.lblCmd = "FPGA_SPI_W";
                        if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06" || mvars.deviceID.Substring(0, 2) == "10")
                        {
                            if (mvars.deviceID.Substring(0, 2) == "10")
                            {
                                Form1.pvindex = mvars.FPGA_DIP_SW;
                                mp.mhFPGASPIWRITE(mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text));

                                Form1.pvindex = mvars.FPGA_PT_BANK;
                                lblFPGAtxt[Form1.pvindex].Text = "3";
                                mp.mhFPGASPIWRITE(Convert.ToInt32(lblFPGAtxt[Form1.pvindex].Text));
                                for (byte svi = mvars.FPGA_GRAY_R; svi <= mvars.FPGA_GRAY_B; svi++)
                                {
                                    Form1.pvindex = svi;
                                    mp.mhFPGASPIWRITE(Convert.ToInt32(lblFPGAtxt[svi].Text));
                                    if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) != -1)
                                    {
                                        //mvars.lstget.Items.Add(mvars.lGet[mvars.lCount - 1]);
                                    }
                                }
                            }
                            else
                            {
                                Form1.pvindex = mvars.FPGA_DIP_SW;
                                mp.mhFPGASPIWRITE(mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text));

                                Form1.pvindex = mvars.FPGA_PT_BANK;
                                lblFPGAtxt[Form1.pvindex].Text = "3";
                                mp.mhFPGASPIWRITE(Convert.ToInt32(lblFPGAtxt[Form1.pvindex].Text));
                                for (byte svi = mvars.FPGA_GRAY_R; svi <= mvars.FPGA_GRAY_B; svi++)
                                {
                                    Form1.pvindex = svi;
                                    mp.mhFPGASPIWRITE(mvars.FPGAsel, Convert.ToInt32(lblFPGAtxt[svi].Text));
                                    if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) != -1)
                                    {
                                        //mvars.lstget.Items.Add(mvars.lGet[mvars.lCount - 1]);
                                    }
                                }
                            }
                        }
                        mp.CommClose();
                        this.Enabled = true;
                    }
                    FPGAtxt[mvars.hscF2sel] = lblFPGAtxt[mvars.hscF2sel].Text;
                    lblc[mvars.hscF2sel - mvars.FPGA_GRAY_R].Text = FPGAtxt[mvars.hscF2sel];
                    lblFPGAtxt[mvars.hscF2sel].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[mvars.hscF2sel] = false;
                    lblFPGAkw[mvars.hscF2sel].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[mvars.hscF2sel] = false;
                    if (chk_Lock.Checked)
                    {
                        lblc[1].Text = lblc[0].Text;
                        lblc[2].Text = lblc[0].Text;
                    }
                }
            }
        }

        private bool flgkeysUD = false;

        private void trackBar1_KeyDown(object sender, KeyEventArgs e)
        {
            TrackBar tbar = (TrackBar)sender;
            mvars.hscF2sel = Convert.ToByte(tbar.Tag);
            flgkeysUD = false;
            if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Right)
            {
                //Form1.pvindex = mvars.hscF2sel + mvars.FPGA_GRAY_R;
            }
            else if (e.KeyCode == Keys.Up || e.KeyCode == Keys.Down)
            {
                flgkeysUD = true;
                if (e.KeyCode == Keys.Up)
                {
                    mvars.hscF2sel--;
                    if (mvars.hscF2sel < mvars.FPGA_GRAY_R) mvars.hscF2sel = mvars.FPGA_GRAY_B;
                }
                else if (e.KeyCode == Keys.Down)
                {
                    mvars.hscF2sel++;
                    if (mvars.hscF2sel > mvars.FPGA_GRAY_B) mvars.hscF2sel = mvars.FPGA_GRAY_R;
                }
                if (mvars.hscF2sel == mvars.FPGA_GRAY_R) { trackBar1.Focus(); }
                else if (mvars.hscF2sel == mvars.FPGA_GRAY_G) { trackBar2.Focus(); }
                else if (mvars.hscF2sel == mvars.FPGA_GRAY_B) { trackBar3.Focus(); }
                lblc[0].Text = FPGAtxt[mvars.FPGA_GRAY_R];
                lblc[1].Text = FPGAtxt[mvars.FPGA_GRAY_G];
                lblc[2].Text = FPGAtxt[mvars.FPGA_GRAY_B];
            }
        }

        private void trackBar1_KeyUp(object sender, KeyEventArgs e)
        {
            TrackBar tbar = (TrackBar)sender;
            mvars.hscF2sel = Convert.ToByte(tbar.Tag);
            if (flgkeysUD == false)
            {
                if (FPGAtxt[mvars.hscF2sel] == lblFPGAtxt[mvars.hscF2sel].Text)
                {
                    lblFPGAtxt[mvars.hscF2sel].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[mvars.hscF2sel] = false;
                    lblFPGAkw[mvars.hscF2sel].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[mvars.hscF2sel] = false;
                }
                else
                {
                    lblFPGAtxt[mvars.hscF2sel].BackColor = Color.Cyan; Form1.PvFPGAtxtBackCyan[mvars.hscF2sel] = true;
                    lblFPGAkw[mvars.hscF2sel].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[Form1.pvindex] = true;
                    if (mvars.demoMode) 
                    {
                        //MessageBox.Show("demo mode");
                        
                    }
                    else
                    {
                        if (mp.Sp1open(Form1.tslblCOM.Text).Substring(0, 5) == "false") { MessageBox.Show("COM error" + "\r\n" + "\r\n" + "Please check", mvars.strUInameMe + "_v" + mvars.UImajor); return; }
                        Form1.tslblHW.Text = "232"; Form1.tslblHW.BackColor = Color.Blue; Form1.tslblHW.ForeColor = Color.White;
                        this.Enabled = false;
                        markreset(5, false, true);
                        mvars.lblCmd = "FPGA_SPI_W";
                        if (mvars.deviceID.Substring(0, 2) == "05" || mvars.deviceID.Substring(0, 2) == "06" || mvars.deviceID.Substring(0, 2) == "11")
                        {

                            if (mvars.deviceID.Substring(0, 2) == "10")
                            {
                                Form1.pvindex = mvars.FPGA_DIP_SW;
                                mp.mhFPGASPIWRITE(mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text));

                                Form1.pvindex = mvars.FPGA_PT_BANK;
                                lblFPGAtxt[Form1.pvindex].Text = "3";
                                mp.mhFPGASPIWRITE(Convert.ToInt32(lblFPGAtxt[Form1.pvindex].Text));
                                for (byte svi = mvars.FPGA_GRAY_R; svi <= mvars.FPGA_GRAY_B; svi++)
                                {
                                    Form1.pvindex = svi;
                                    mp.mhFPGASPIWRITE(Convert.ToInt32(lblFPGAtxt[svi].Text));
                                    if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) != -1)
                                    {
                                        //mvars.lstget.Items.Add(mvars.lGet[mvars.lCount - 1]);
                                    }
                                }
                            }
                            else
                            {
                                Form1.pvindex = mvars.FPGA_DIP_SW;
                                mp.mhFPGASPIWRITE(mp.BinToDec(lblFPGAtxt[Form1.pvindex].Text));

                                Form1.pvindex = mvars.FPGA_PT_BANK;
                                lblFPGAtxt[Form1.pvindex].Text = "3";
                                mp.mhFPGASPIWRITE(mvars.FPGAsel, Convert.ToInt32(lblFPGAtxt[Form1.pvindex].Text));
                                for (byte svi = mvars.FPGA_GRAY_R; svi <= mvars.FPGA_GRAY_B; svi++)
                                {
                                    Form1.pvindex = svi;
                                    mp.mhFPGASPIWRITE(mvars.FPGAsel, Convert.ToInt32(lblFPGAtxt[svi].Text));
                                    if (mvars.lGet[mvars.lCount - 1].IndexOf("ERROR", 0) != -1)
                                    {
                                        //mvars.lstget.Items.Add(mvars.lGet[mvars.lCount - 1]);
                                    }
                                }
                            }   
                        }
                    }
                    FPGAtxt[mvars.hscF2sel] = lblFPGAtxt[mvars.hscF2sel].Text;
                    lblc[mvars.hscF2sel - mvars.FPGA_GRAY_R].Text = FPGAtxt[mvars.hscF2sel];
                    lblFPGAtxt[mvars.hscF2sel].BackColor = Color.White; Form1.PvFPGAtxtBackCyan[mvars.hscF2sel] = false;
                    lblFPGAkw[mvars.hscF2sel].ForeColor = Color.Black; //Form1.PvFPGAkwForeCyan[mvars.hscF2sel] = false;
                }
            }
        }

        private void chk_Lock_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void chk_Lock_Click(object sender, EventArgs e)
        {
            if (chk_Lock.Checked == true)
            {
                //hScrollBar2.Value = hScrollBar1.Value;
                //hScrollBar3.Value = hScrollBar1.Value;
                trackBar2.Value = trackBar1.Value;
                trackBar3.Value = trackBar1.Value;
                lblFPGAtxt[mvars.FPGA_GRAY_G].Text = lblFPGAtxt[mvars.FPGA_GRAY_R].Text;
                lblFPGAtxt[mvars.FPGA_GRAY_B].Text = lblFPGAtxt[mvars.FPGA_GRAY_R].Text;
                lblc[1].Text = lblc[0].Text;
                lblc[2].Text = lblc[0].Text;
            }
        }
    }
}
